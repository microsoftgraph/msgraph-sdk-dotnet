// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type HostSecurityState.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class HostSecurityState
    {

        /// <summary>
        /// Gets or sets fqdn.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "fqdn", Required = Newtonsoft.Json.Required.Default)]
        public string Fqdn { get; set; }
    
        /// <summary>
        /// Gets or sets isAzureAdJoined.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isAzureAdJoined", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsAzureAdJoined { get; set; }
    
        /// <summary>
        /// Gets or sets isAzureAdRegistered.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isAzureAdRegistered", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsAzureAdRegistered { get; set; }
    
        /// <summary>
        /// Gets or sets isHybridAzureDomainJoined.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isHybridAzureDomainJoined", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsHybridAzureDomainJoined { get; set; }
    
        /// <summary>
        /// Gets or sets netBiosName.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "netBiosName", Required = Newtonsoft.Json.Required.Default)]
        public string NetBiosName { get; set; }
    
        /// <summary>
        /// Gets or sets os.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "os", Required = Newtonsoft.Json.Required.Default)]
        public string Os { get; set; }
    
        /// <summary>
        /// Gets or sets privateIpAddress.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "privateIpAddress", Required = Newtonsoft.Json.Required.Default)]
        public string PrivateIpAddress { get; set; }
    
        /// <summary>
        /// Gets or sets publicIpAddress.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "publicIpAddress", Required = Newtonsoft.Json.Required.Default)]
        public string PublicIpAddress { get; set; }
    
        /// <summary>
        /// Gets or sets riskScore.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "riskScore", Required = Newtonsoft.Json.Required.Default)]
        public string RiskScore { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "@odata.type", Required = Newtonsoft.Json.Required.Default)]
        public string ODataType { get; set; }
    
    }
}
