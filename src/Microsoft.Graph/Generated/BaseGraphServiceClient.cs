// <auto-generated/>
using Microsoft.Graph.Admin;
using Microsoft.Graph.AgreementAcceptances;
using Microsoft.Graph.Agreements;
using Microsoft.Graph.AppCatalogs;
using Microsoft.Graph.ApplicationTemplates;
using Microsoft.Graph.Applications;
using Microsoft.Graph.ApplicationsWithAppId;
using Microsoft.Graph.ApplicationsWithUniqueName;
using Microsoft.Graph.AuditLogs;
using Microsoft.Graph.AuthenticationMethodConfigurations;
using Microsoft.Graph.AuthenticationMethodsPolicy;
using Microsoft.Graph.CertificateBasedAuthConfiguration;
using Microsoft.Graph.Chats;
using Microsoft.Graph.Communications;
using Microsoft.Graph.Compliance;
using Microsoft.Graph.Connections;
using Microsoft.Graph.Contacts;
using Microsoft.Graph.Contracts;
using Microsoft.Graph.DataPolicyOperations;
using Microsoft.Graph.DeviceAppManagement;
using Microsoft.Graph.DeviceManagement;
using Microsoft.Graph.Devices;
using Microsoft.Graph.DevicesWithDeviceId;
using Microsoft.Graph.DirectoryNamespace;
using Microsoft.Graph.DirectoryObjects;
using Microsoft.Graph.DirectoryRoleTemplates;
using Microsoft.Graph.DirectoryRoles;
using Microsoft.Graph.DirectoryRolesWithRoleTemplateId;
using Microsoft.Graph.DomainDnsRecords;
using Microsoft.Graph.Domains;
using Microsoft.Graph.Drives;
using Microsoft.Graph.Education;
using Microsoft.Graph.EmployeeExperience;
using Microsoft.Graph.External;
using Microsoft.Graph.FilterOperators;
using Microsoft.Graph.Functions;
using Microsoft.Graph.GroupLifecyclePolicies;
using Microsoft.Graph.GroupSettingTemplates;
using Microsoft.Graph.GroupSettings;
using Microsoft.Graph.Groups;
using Microsoft.Graph.GroupsWithUniqueName;
using Microsoft.Graph.Identity;
using Microsoft.Graph.IdentityGovernance;
using Microsoft.Graph.IdentityProtection;
using Microsoft.Graph.IdentityProviders;
using Microsoft.Graph.InformationProtection;
using Microsoft.Graph.Invitations;
using Microsoft.Graph.Me;
using Microsoft.Graph.Oauth2PermissionGrants;
using Microsoft.Graph.Organization;
using Microsoft.Graph.PermissionGrants;
using Microsoft.Graph.Places;
using Microsoft.Graph.Planner;
using Microsoft.Graph.Policies;
using Microsoft.Graph.Print;
using Microsoft.Graph.Privacy;
using Microsoft.Graph.Reports;
using Microsoft.Graph.RoleManagement;
using Microsoft.Graph.SchemaExtensions;
using Microsoft.Graph.ScopedRoleMemberships;
using Microsoft.Graph.Search;
using Microsoft.Graph.Security;
using Microsoft.Graph.ServicePrincipals;
using Microsoft.Graph.ServicePrincipalsWithAppId;
using Microsoft.Graph.Shares;
using Microsoft.Graph.Sites;
using Microsoft.Graph.Solutions;
using Microsoft.Graph.Storage;
using Microsoft.Graph.SubscribedSkus;
using Microsoft.Graph.Subscriptions;
using Microsoft.Graph.Teams;
using Microsoft.Graph.TeamsTemplates;
using Microsoft.Graph.Teamwork;
using Microsoft.Graph.TenantRelationships;
using Microsoft.Graph.Users;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Store;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Microsoft.Graph
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class BaseGraphServiceClient : BaseRequestBuilder
    {
        /// <summary>Provides operations to manage the admin singleton.</summary>
        public global::Microsoft.Graph.Admin.AdminRequestBuilder Admin
        {
            get => new global::Microsoft.Graph.Admin.AdminRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of agreementAcceptance entities.</summary>
        public global::Microsoft.Graph.AgreementAcceptances.AgreementAcceptancesRequestBuilder AgreementAcceptances
        {
            get => new global::Microsoft.Graph.AgreementAcceptances.AgreementAcceptancesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of agreement entities.</summary>
        public global::Microsoft.Graph.Agreements.AgreementsRequestBuilder Agreements
        {
            get => new global::Microsoft.Graph.Agreements.AgreementsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the appCatalogs singleton.</summary>
        public global::Microsoft.Graph.AppCatalogs.AppCatalogsRequestBuilder AppCatalogs
        {
            get => new global::Microsoft.Graph.AppCatalogs.AppCatalogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of application entities.</summary>
        public global::Microsoft.Graph.Applications.ApplicationsRequestBuilder Applications
        {
            get => new global::Microsoft.Graph.Applications.ApplicationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of applicationTemplate entities.</summary>
        public global::Microsoft.Graph.ApplicationTemplates.ApplicationTemplatesRequestBuilder ApplicationTemplates
        {
            get => new global::Microsoft.Graph.ApplicationTemplates.ApplicationTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the auditLogRoot singleton.</summary>
        public global::Microsoft.Graph.AuditLogs.AuditLogsRequestBuilder AuditLogs
        {
            get => new global::Microsoft.Graph.AuditLogs.AuditLogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of authenticationMethodConfiguration entities.</summary>
        public global::Microsoft.Graph.AuthenticationMethodConfigurations.AuthenticationMethodConfigurationsRequestBuilder AuthenticationMethodConfigurations
        {
            get => new global::Microsoft.Graph.AuthenticationMethodConfigurations.AuthenticationMethodConfigurationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the authenticationMethodsPolicy singleton.</summary>
        public global::Microsoft.Graph.AuthenticationMethodsPolicy.AuthenticationMethodsPolicyRequestBuilder AuthenticationMethodsPolicy
        {
            get => new global::Microsoft.Graph.AuthenticationMethodsPolicy.AuthenticationMethodsPolicyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of certificateBasedAuthConfiguration entities.</summary>
        public global::Microsoft.Graph.CertificateBasedAuthConfiguration.CertificateBasedAuthConfigurationRequestBuilder CertificateBasedAuthConfiguration
        {
            get => new global::Microsoft.Graph.CertificateBasedAuthConfiguration.CertificateBasedAuthConfigurationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of chat entities.</summary>
        public global::Microsoft.Graph.Chats.ChatsRequestBuilder Chats
        {
            get => new global::Microsoft.Graph.Chats.ChatsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the cloudCommunications singleton.</summary>
        public global::Microsoft.Graph.Communications.CommunicationsRequestBuilder Communications
        {
            get => new global::Microsoft.Graph.Communications.CommunicationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the compliance singleton.</summary>
        public global::Microsoft.Graph.Compliance.ComplianceRequestBuilder Compliance
        {
            get => new global::Microsoft.Graph.Compliance.ComplianceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of externalConnection entities.</summary>
        public global::Microsoft.Graph.Connections.ConnectionsRequestBuilder Connections
        {
            get => new global::Microsoft.Graph.Connections.ConnectionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of orgContact entities.</summary>
        public global::Microsoft.Graph.Contacts.ContactsRequestBuilder Contacts
        {
            get => new global::Microsoft.Graph.Contacts.ContactsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of contract entities.</summary>
        public global::Microsoft.Graph.Contracts.ContractsRequestBuilder Contracts
        {
            get => new global::Microsoft.Graph.Contracts.ContractsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of dataPolicyOperation entities.</summary>
        public global::Microsoft.Graph.DataPolicyOperations.DataPolicyOperationsRequestBuilder DataPolicyOperations
        {
            get => new global::Microsoft.Graph.DataPolicyOperations.DataPolicyOperationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the deviceAppManagement singleton.</summary>
        public global::Microsoft.Graph.DeviceAppManagement.DeviceAppManagementRequestBuilder DeviceAppManagement
        {
            get => new global::Microsoft.Graph.DeviceAppManagement.DeviceAppManagementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the deviceManagement singleton.</summary>
        public global::Microsoft.Graph.DeviceManagement.DeviceManagementRequestBuilder DeviceManagement
        {
            get => new global::Microsoft.Graph.DeviceManagement.DeviceManagementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of device entities.</summary>
        public global::Microsoft.Graph.Devices.DevicesRequestBuilder Devices
        {
            get => new global::Microsoft.Graph.Devices.DevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the directory singleton.</summary>
        public global::Microsoft.Graph.DirectoryNamespace.DirectoryRequestBuilder Directory
        {
            get => new global::Microsoft.Graph.DirectoryNamespace.DirectoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of directoryObject entities.</summary>
        public global::Microsoft.Graph.DirectoryObjects.DirectoryObjectsRequestBuilder DirectoryObjects
        {
            get => new global::Microsoft.Graph.DirectoryObjects.DirectoryObjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of directoryRole entities.</summary>
        public global::Microsoft.Graph.DirectoryRoles.DirectoryRolesRequestBuilder DirectoryRoles
        {
            get => new global::Microsoft.Graph.DirectoryRoles.DirectoryRolesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of directoryRoleTemplate entities.</summary>
        public global::Microsoft.Graph.DirectoryRoleTemplates.DirectoryRoleTemplatesRequestBuilder DirectoryRoleTemplates
        {
            get => new global::Microsoft.Graph.DirectoryRoleTemplates.DirectoryRoleTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of domainDnsRecord entities.</summary>
        public global::Microsoft.Graph.DomainDnsRecords.DomainDnsRecordsRequestBuilder DomainDnsRecords
        {
            get => new global::Microsoft.Graph.DomainDnsRecords.DomainDnsRecordsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of domain entities.</summary>
        public global::Microsoft.Graph.Domains.DomainsRequestBuilder Domains
        {
            get => new global::Microsoft.Graph.Domains.DomainsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of drive entities.</summary>
        public global::Microsoft.Graph.Drives.DrivesRequestBuilder Drives
        {
            get => new global::Microsoft.Graph.Drives.DrivesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the educationRoot singleton.</summary>
        public global::Microsoft.Graph.Education.EducationRequestBuilder Education
        {
            get => new global::Microsoft.Graph.Education.EducationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the employeeExperience singleton.</summary>
        public global::Microsoft.Graph.EmployeeExperience.EmployeeExperienceRequestBuilder EmployeeExperience
        {
            get => new global::Microsoft.Graph.EmployeeExperience.EmployeeExperienceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the external singleton.</summary>
        public global::Microsoft.Graph.External.ExternalRequestBuilder External
        {
            get => new global::Microsoft.Graph.External.ExternalRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of filterOperatorSchema entities.</summary>
        public global::Microsoft.Graph.FilterOperators.FilterOperatorsRequestBuilder FilterOperators
        {
            get => new global::Microsoft.Graph.FilterOperators.FilterOperatorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of attributeMappingFunctionSchema entities.</summary>
        public global::Microsoft.Graph.Functions.FunctionsRequestBuilder Functions
        {
            get => new global::Microsoft.Graph.Functions.FunctionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of groupLifecyclePolicy entities.</summary>
        public global::Microsoft.Graph.GroupLifecyclePolicies.GroupLifecyclePoliciesRequestBuilder GroupLifecyclePolicies
        {
            get => new global::Microsoft.Graph.GroupLifecyclePolicies.GroupLifecyclePoliciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of group entities.</summary>
        public global::Microsoft.Graph.Groups.GroupsRequestBuilder Groups
        {
            get => new global::Microsoft.Graph.Groups.GroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of groupSetting entities.</summary>
        public global::Microsoft.Graph.GroupSettings.GroupSettingsRequestBuilder GroupSettings
        {
            get => new global::Microsoft.Graph.GroupSettings.GroupSettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of groupSettingTemplate entities.</summary>
        public global::Microsoft.Graph.GroupSettingTemplates.GroupSettingTemplatesRequestBuilder GroupSettingTemplates
        {
            get => new global::Microsoft.Graph.GroupSettingTemplates.GroupSettingTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the identityContainer singleton.</summary>
        public global::Microsoft.Graph.Identity.IdentityRequestBuilder Identity
        {
            get => new global::Microsoft.Graph.Identity.IdentityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the identityGovernance singleton.</summary>
        public global::Microsoft.Graph.IdentityGovernance.IdentityGovernanceRequestBuilder IdentityGovernance
        {
            get => new global::Microsoft.Graph.IdentityGovernance.IdentityGovernanceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the identityProtectionRoot singleton.</summary>
        public global::Microsoft.Graph.IdentityProtection.IdentityProtectionRequestBuilder IdentityProtection
        {
            get => new global::Microsoft.Graph.IdentityProtection.IdentityProtectionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of identityProvider entities.</summary>
        public global::Microsoft.Graph.IdentityProviders.IdentityProvidersRequestBuilder IdentityProviders
        {
            get => new global::Microsoft.Graph.IdentityProviders.IdentityProvidersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the informationProtection singleton.</summary>
        public global::Microsoft.Graph.InformationProtection.InformationProtectionRequestBuilder InformationProtection
        {
            get => new global::Microsoft.Graph.InformationProtection.InformationProtectionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of invitation entities.</summary>
        public global::Microsoft.Graph.Invitations.InvitationsRequestBuilder Invitations
        {
            get => new global::Microsoft.Graph.Invitations.InvitationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the user singleton.</summary>
        public global::Microsoft.Graph.Me.MeRequestBuilder Me
        {
            get => new global::Microsoft.Graph.Me.MeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of oAuth2PermissionGrant entities.</summary>
        public global::Microsoft.Graph.Oauth2PermissionGrants.Oauth2PermissionGrantsRequestBuilder Oauth2PermissionGrants
        {
            get => new global::Microsoft.Graph.Oauth2PermissionGrants.Oauth2PermissionGrantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of organization entities.</summary>
        public global::Microsoft.Graph.Organization.OrganizationRequestBuilder Organization
        {
            get => new global::Microsoft.Graph.Organization.OrganizationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of resourceSpecificPermissionGrant entities.</summary>
        public global::Microsoft.Graph.PermissionGrants.PermissionGrantsRequestBuilder PermissionGrants
        {
            get => new global::Microsoft.Graph.PermissionGrants.PermissionGrantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The places property</summary>
        public global::Microsoft.Graph.Places.PlacesRequestBuilder Places
        {
            get => new global::Microsoft.Graph.Places.PlacesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the planner singleton.</summary>
        public global::Microsoft.Graph.Planner.PlannerRequestBuilder Planner
        {
            get => new global::Microsoft.Graph.Planner.PlannerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the policyRoot singleton.</summary>
        public global::Microsoft.Graph.Policies.PoliciesRequestBuilder Policies
        {
            get => new global::Microsoft.Graph.Policies.PoliciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the print singleton.</summary>
        public global::Microsoft.Graph.Print.PrintRequestBuilder Print
        {
            get => new global::Microsoft.Graph.Print.PrintRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the privacy singleton.</summary>
        public global::Microsoft.Graph.Privacy.PrivacyRequestBuilder Privacy
        {
            get => new global::Microsoft.Graph.Privacy.PrivacyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the reportRoot singleton.</summary>
        public global::Microsoft.Graph.Reports.ReportsRequestBuilder Reports
        {
            get => new global::Microsoft.Graph.Reports.ReportsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the roleManagement singleton.</summary>
        public global::Microsoft.Graph.RoleManagement.RoleManagementRequestBuilder RoleManagement
        {
            get => new global::Microsoft.Graph.RoleManagement.RoleManagementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of schemaExtension entities.</summary>
        public global::Microsoft.Graph.SchemaExtensions.SchemaExtensionsRequestBuilder SchemaExtensions
        {
            get => new global::Microsoft.Graph.SchemaExtensions.SchemaExtensionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of scopedRoleMembership entities.</summary>
        public global::Microsoft.Graph.ScopedRoleMemberships.ScopedRoleMembershipsRequestBuilder ScopedRoleMemberships
        {
            get => new global::Microsoft.Graph.ScopedRoleMemberships.ScopedRoleMembershipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the searchEntity singleton.</summary>
        public global::Microsoft.Graph.Search.SearchRequestBuilder Search
        {
            get => new global::Microsoft.Graph.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the security singleton.</summary>
        public global::Microsoft.Graph.Security.SecurityRequestBuilder Security
        {
            get => new global::Microsoft.Graph.Security.SecurityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of servicePrincipal entities.</summary>
        public global::Microsoft.Graph.ServicePrincipals.ServicePrincipalsRequestBuilder ServicePrincipals
        {
            get => new global::Microsoft.Graph.ServicePrincipals.ServicePrincipalsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of sharedDriveItem entities.</summary>
        public global::Microsoft.Graph.Shares.SharesRequestBuilder Shares
        {
            get => new global::Microsoft.Graph.Shares.SharesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of site entities.</summary>
        public global::Microsoft.Graph.Sites.SitesRequestBuilder Sites
        {
            get => new global::Microsoft.Graph.Sites.SitesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the solutionsRoot singleton.</summary>
        public global::Microsoft.Graph.Solutions.SolutionsRequestBuilder Solutions
        {
            get => new global::Microsoft.Graph.Solutions.SolutionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the storage singleton.</summary>
        public global::Microsoft.Graph.Storage.StorageRequestBuilder Storage
        {
            get => new global::Microsoft.Graph.Storage.StorageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of subscribedSku entities.</summary>
        public global::Microsoft.Graph.SubscribedSkus.SubscribedSkusRequestBuilder SubscribedSkus
        {
            get => new global::Microsoft.Graph.SubscribedSkus.SubscribedSkusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of subscription entities.</summary>
        public global::Microsoft.Graph.Subscriptions.SubscriptionsRequestBuilder Subscriptions
        {
            get => new global::Microsoft.Graph.Subscriptions.SubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of team entities.</summary>
        public global::Microsoft.Graph.Teams.TeamsRequestBuilder Teams
        {
            get => new global::Microsoft.Graph.Teams.TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of teamsTemplate entities.</summary>
        public global::Microsoft.Graph.TeamsTemplates.TeamsTemplatesRequestBuilder TeamsTemplates
        {
            get => new global::Microsoft.Graph.TeamsTemplates.TeamsTemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the teamwork singleton.</summary>
        public global::Microsoft.Graph.Teamwork.TeamworkRequestBuilder Teamwork
        {
            get => new global::Microsoft.Graph.Teamwork.TeamworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the tenantRelationship singleton.</summary>
        public global::Microsoft.Graph.TenantRelationships.TenantRelationshipsRequestBuilder TenantRelationships
        {
            get => new global::Microsoft.Graph.TenantRelationships.TenantRelationshipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the collection of user entities.</summary>
        public global::Microsoft.Graph.Users.UsersRequestBuilder Users
        {
            get => new global::Microsoft.Graph.Users.UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Provides operations to manage the collection of application entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.ApplicationsWithAppId.ApplicationsWithAppIdRequestBuilder"/></returns>
        /// <param name="appId">Alternate key of application</param>
        public global::Microsoft.Graph.ApplicationsWithAppId.ApplicationsWithAppIdRequestBuilder ApplicationsWithAppId(string appId)
        {
            if(string.IsNullOrEmpty(appId)) throw new ArgumentNullException(nameof(appId));
            return new global::Microsoft.Graph.ApplicationsWithAppId.ApplicationsWithAppIdRequestBuilder(PathParameters, RequestAdapter, appId);
        }
        /// <summary>
        /// Provides operations to manage the collection of application entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.ApplicationsWithUniqueName.ApplicationsWithUniqueNameRequestBuilder"/></returns>
        /// <param name="uniqueName">Alternate key of application</param>
        public global::Microsoft.Graph.ApplicationsWithUniqueName.ApplicationsWithUniqueNameRequestBuilder ApplicationsWithUniqueName(string uniqueName)
        {
            if(string.IsNullOrEmpty(uniqueName)) throw new ArgumentNullException(nameof(uniqueName));
            return new global::Microsoft.Graph.ApplicationsWithUniqueName.ApplicationsWithUniqueNameRequestBuilder(PathParameters, RequestAdapter, uniqueName);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.BaseGraphServiceClient"/> and sets the default values.
        /// </summary>
        /// <param name="backingStore">The backing store to use for the models.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BaseGraphServiceClient(IRequestAdapter requestAdapter, IBackingStoreFactory backingStore = default) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://graph.microsoft.com/v1.0";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
            RequestAdapter.EnableBackingStore(backingStore);
        }
        /// <summary>
        /// Provides operations to manage the collection of device entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.DevicesWithDeviceId.DevicesWithDeviceIdRequestBuilder"/></returns>
        /// <param name="deviceId">Alternate key of device</param>
        public global::Microsoft.Graph.DevicesWithDeviceId.DevicesWithDeviceIdRequestBuilder DevicesWithDeviceId(string deviceId)
        {
            if(string.IsNullOrEmpty(deviceId)) throw new ArgumentNullException(nameof(deviceId));
            return new global::Microsoft.Graph.DevicesWithDeviceId.DevicesWithDeviceIdRequestBuilder(PathParameters, RequestAdapter, deviceId);
        }
        /// <summary>
        /// Provides operations to manage the collection of directoryRole entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.DirectoryRolesWithRoleTemplateId.DirectoryRolesWithRoleTemplateIdRequestBuilder"/></returns>
        /// <param name="roleTemplateId">Alternate key of directoryRole</param>
        public global::Microsoft.Graph.DirectoryRolesWithRoleTemplateId.DirectoryRolesWithRoleTemplateIdRequestBuilder DirectoryRolesWithRoleTemplateId(string roleTemplateId)
        {
            if(string.IsNullOrEmpty(roleTemplateId)) throw new ArgumentNullException(nameof(roleTemplateId));
            return new global::Microsoft.Graph.DirectoryRolesWithRoleTemplateId.DirectoryRolesWithRoleTemplateIdRequestBuilder(PathParameters, RequestAdapter, roleTemplateId);
        }
        /// <summary>
        /// Provides operations to manage the collection of group entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.GroupsWithUniqueName.GroupsWithUniqueNameRequestBuilder"/></returns>
        /// <param name="uniqueName">Alternate key of group</param>
        public global::Microsoft.Graph.GroupsWithUniqueName.GroupsWithUniqueNameRequestBuilder GroupsWithUniqueName(string uniqueName)
        {
            if(string.IsNullOrEmpty(uniqueName)) throw new ArgumentNullException(nameof(uniqueName));
            return new global::Microsoft.Graph.GroupsWithUniqueName.GroupsWithUniqueNameRequestBuilder(PathParameters, RequestAdapter, uniqueName);
        }
        /// <summary>
        /// Provides operations to manage the collection of servicePrincipal entities.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.ServicePrincipalsWithAppId.ServicePrincipalsWithAppIdRequestBuilder"/></returns>
        /// <param name="appId">Alternate key of servicePrincipal</param>
        public global::Microsoft.Graph.ServicePrincipalsWithAppId.ServicePrincipalsWithAppIdRequestBuilder ServicePrincipalsWithAppId(string appId)
        {
            if(string.IsNullOrEmpty(appId)) throw new ArgumentNullException(nameof(appId));
            return new global::Microsoft.Graph.ServicePrincipalsWithAppId.ServicePrincipalsWithAppIdRequestBuilder(PathParameters, RequestAdapter, appId);
        }
    }
}
