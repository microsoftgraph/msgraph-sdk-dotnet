// <auto-generated/>
using Microsoft.Graph.Me.Activities;
using Microsoft.Graph.Me.AgreementAcceptances;
using Microsoft.Graph.Me.AppRoleAssignments;
using Microsoft.Graph.Me.AssignLicense;
using Microsoft.Graph.Me.Authentication;
using Microsoft.Graph.Me.Calendar;
using Microsoft.Graph.Me.CalendarGroups;
using Microsoft.Graph.Me.CalendarView;
using Microsoft.Graph.Me.Calendars;
using Microsoft.Graph.Me.ChangePassword;
using Microsoft.Graph.Me.Chats;
using Microsoft.Graph.Me.CheckMemberGroups;
using Microsoft.Graph.Me.CheckMemberObjects;
using Microsoft.Graph.Me.CloudClipboard;
using Microsoft.Graph.Me.ContactFolders;
using Microsoft.Graph.Me.Contacts;
using Microsoft.Graph.Me.CreatedObjects;
using Microsoft.Graph.Me.DeviceManagementTroubleshootingEvents;
using Microsoft.Graph.Me.DirectReports;
using Microsoft.Graph.Me.Drive;
using Microsoft.Graph.Me.Drives;
using Microsoft.Graph.Me.EmployeeExperience;
using Microsoft.Graph.Me.Events;
using Microsoft.Graph.Me.ExportDeviceAndAppManagementData;
using Microsoft.Graph.Me.ExportDeviceAndAppManagementDataWithSkipWithTop;
using Microsoft.Graph.Me.ExportPersonalData;
using Microsoft.Graph.Me.Extensions;
using Microsoft.Graph.Me.FindMeetingTimes;
using Microsoft.Graph.Me.FollowedSites;
using Microsoft.Graph.Me.GetMailTips;
using Microsoft.Graph.Me.GetManagedAppDiagnosticStatuses;
using Microsoft.Graph.Me.GetManagedAppPolicies;
using Microsoft.Graph.Me.GetManagedDevicesWithAppFailures;
using Microsoft.Graph.Me.GetMemberGroups;
using Microsoft.Graph.Me.GetMemberObjects;
using Microsoft.Graph.Me.InferenceClassification;
using Microsoft.Graph.Me.Insights;
using Microsoft.Graph.Me.JoinedTeams;
using Microsoft.Graph.Me.LicenseDetails;
using Microsoft.Graph.Me.MailFolders;
using Microsoft.Graph.Me.MailboxSettings;
using Microsoft.Graph.Me.ManagedAppRegistrations;
using Microsoft.Graph.Me.ManagedDevices;
using Microsoft.Graph.Me.Manager;
using Microsoft.Graph.Me.MemberOf;
using Microsoft.Graph.Me.Messages;
using Microsoft.Graph.Me.Oauth2PermissionGrants;
using Microsoft.Graph.Me.Onenote;
using Microsoft.Graph.Me.OnlineMeetings;
using Microsoft.Graph.Me.Outlook;
using Microsoft.Graph.Me.OwnedDevices;
using Microsoft.Graph.Me.OwnedObjects;
using Microsoft.Graph.Me.People;
using Microsoft.Graph.Me.PermissionGrants;
using Microsoft.Graph.Me.Photo;
using Microsoft.Graph.Me.Photos;
using Microsoft.Graph.Me.Planner;
using Microsoft.Graph.Me.Presence;
using Microsoft.Graph.Me.RegisteredDevices;
using Microsoft.Graph.Me.ReminderViewWithStartDateTimeWithEndDateTime;
using Microsoft.Graph.Me.RemoveAllDevicesFromManagement;
using Microsoft.Graph.Me.ReprocessLicenseAssignment;
using Microsoft.Graph.Me.Restore;
using Microsoft.Graph.Me.RetryServiceProvisioning;
using Microsoft.Graph.Me.RevokeSignInSessions;
using Microsoft.Graph.Me.ScopedRoleMemberOf;
using Microsoft.Graph.Me.SendMail;
using Microsoft.Graph.Me.ServiceProvisioningErrors;
using Microsoft.Graph.Me.Settings;
using Microsoft.Graph.Me.Sponsors;
using Microsoft.Graph.Me.Teamwork;
using Microsoft.Graph.Me.Todo;
using Microsoft.Graph.Me.TransitiveMemberOf;
using Microsoft.Graph.Me.TranslateExchangeIds;
using Microsoft.Graph.Me.WipeManagedAppRegistrationsByDeviceTag;
using Microsoft.Graph.Models.ODataErrors;
using Microsoft.Graph.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Microsoft.Graph.Me
{
    /// <summary>
    /// Provides operations to manage the user singleton.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class MeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Provides operations to manage the activities property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Activities.ActivitiesRequestBuilder Activities
        {
            get => new global::Microsoft.Graph.Me.Activities.ActivitiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the agreementAcceptances property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.AgreementAcceptances.AgreementAcceptancesRequestBuilder AgreementAcceptances
        {
            get => new global::Microsoft.Graph.Me.AgreementAcceptances.AgreementAcceptancesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the appRoleAssignments property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.AppRoleAssignments.AppRoleAssignmentsRequestBuilder AppRoleAssignments
        {
            get => new global::Microsoft.Graph.Me.AppRoleAssignments.AppRoleAssignmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the assignLicense method.</summary>
        public global::Microsoft.Graph.Me.AssignLicense.AssignLicenseRequestBuilder AssignLicense
        {
            get => new global::Microsoft.Graph.Me.AssignLicense.AssignLicenseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the authentication property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Authentication.AuthenticationRequestBuilder Authentication
        {
            get => new global::Microsoft.Graph.Me.Authentication.AuthenticationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the calendar property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Calendar.CalendarRequestBuilder Calendar
        {
            get => new global::Microsoft.Graph.Me.Calendar.CalendarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the calendarGroups property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.CalendarGroups.CalendarGroupsRequestBuilder CalendarGroups
        {
            get => new global::Microsoft.Graph.Me.CalendarGroups.CalendarGroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the calendars property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Calendars.CalendarsRequestBuilder Calendars
        {
            get => new global::Microsoft.Graph.Me.Calendars.CalendarsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the calendarView property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.CalendarView.CalendarViewRequestBuilder CalendarView
        {
            get => new global::Microsoft.Graph.Me.CalendarView.CalendarViewRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the changePassword method.</summary>
        public global::Microsoft.Graph.Me.ChangePassword.ChangePasswordRequestBuilder ChangePassword
        {
            get => new global::Microsoft.Graph.Me.ChangePassword.ChangePasswordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the chats property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Chats.ChatsRequestBuilder Chats
        {
            get => new global::Microsoft.Graph.Me.Chats.ChatsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the checkMemberGroups method.</summary>
        public global::Microsoft.Graph.Me.CheckMemberGroups.CheckMemberGroupsRequestBuilder CheckMemberGroups
        {
            get => new global::Microsoft.Graph.Me.CheckMemberGroups.CheckMemberGroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the checkMemberObjects method.</summary>
        public global::Microsoft.Graph.Me.CheckMemberObjects.CheckMemberObjectsRequestBuilder CheckMemberObjects
        {
            get => new global::Microsoft.Graph.Me.CheckMemberObjects.CheckMemberObjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the cloudClipboard property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.CloudClipboard.CloudClipboardRequestBuilder CloudClipboard
        {
            get => new global::Microsoft.Graph.Me.CloudClipboard.CloudClipboardRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the contactFolders property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.ContactFolders.ContactFoldersRequestBuilder ContactFolders
        {
            get => new global::Microsoft.Graph.Me.ContactFolders.ContactFoldersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the contacts property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Contacts.ContactsRequestBuilder Contacts
        {
            get => new global::Microsoft.Graph.Me.Contacts.ContactsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the createdObjects property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.CreatedObjects.CreatedObjectsRequestBuilder CreatedObjects
        {
            get => new global::Microsoft.Graph.Me.CreatedObjects.CreatedObjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the deviceManagementTroubleshootingEvents property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.DeviceManagementTroubleshootingEvents.DeviceManagementTroubleshootingEventsRequestBuilder DeviceManagementTroubleshootingEvents
        {
            get => new global::Microsoft.Graph.Me.DeviceManagementTroubleshootingEvents.DeviceManagementTroubleshootingEventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the directReports property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.DirectReports.DirectReportsRequestBuilder DirectReports
        {
            get => new global::Microsoft.Graph.Me.DirectReports.DirectReportsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the drive property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Drive.DriveRequestBuilder Drive
        {
            get => new global::Microsoft.Graph.Me.Drive.DriveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the drives property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Drives.DrivesRequestBuilder Drives
        {
            get => new global::Microsoft.Graph.Me.Drives.DrivesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the employeeExperience property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.EmployeeExperience.EmployeeExperienceRequestBuilder EmployeeExperience
        {
            get => new global::Microsoft.Graph.Me.EmployeeExperience.EmployeeExperienceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the events property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Events.EventsRequestBuilder Events
        {
            get => new global::Microsoft.Graph.Me.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the exportDeviceAndAppManagementData method.</summary>
        public global::Microsoft.Graph.Me.ExportDeviceAndAppManagementData.ExportDeviceAndAppManagementDataRequestBuilder ExportDeviceAndAppManagementData
        {
            get => new global::Microsoft.Graph.Me.ExportDeviceAndAppManagementData.ExportDeviceAndAppManagementDataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the exportPersonalData method.</summary>
        public global::Microsoft.Graph.Me.ExportPersonalData.ExportPersonalDataRequestBuilder ExportPersonalData
        {
            get => new global::Microsoft.Graph.Me.ExportPersonalData.ExportPersonalDataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the extensions property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Extensions.ExtensionsRequestBuilder Extensions
        {
            get => new global::Microsoft.Graph.Me.Extensions.ExtensionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the findMeetingTimes method.</summary>
        public global::Microsoft.Graph.Me.FindMeetingTimes.FindMeetingTimesRequestBuilder FindMeetingTimes
        {
            get => new global::Microsoft.Graph.Me.FindMeetingTimes.FindMeetingTimesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the followedSites property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.FollowedSites.FollowedSitesRequestBuilder FollowedSites
        {
            get => new global::Microsoft.Graph.Me.FollowedSites.FollowedSitesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getMailTips method.</summary>
        public global::Microsoft.Graph.Me.GetMailTips.GetMailTipsRequestBuilder GetMailTips
        {
            get => new global::Microsoft.Graph.Me.GetMailTips.GetMailTipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getManagedAppDiagnosticStatuses method.</summary>
        public global::Microsoft.Graph.Me.GetManagedAppDiagnosticStatuses.GetManagedAppDiagnosticStatusesRequestBuilder GetManagedAppDiagnosticStatuses
        {
            get => new global::Microsoft.Graph.Me.GetManagedAppDiagnosticStatuses.GetManagedAppDiagnosticStatusesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getManagedAppPolicies method.</summary>
        public global::Microsoft.Graph.Me.GetManagedAppPolicies.GetManagedAppPoliciesRequestBuilder GetManagedAppPolicies
        {
            get => new global::Microsoft.Graph.Me.GetManagedAppPolicies.GetManagedAppPoliciesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getManagedDevicesWithAppFailures method.</summary>
        public global::Microsoft.Graph.Me.GetManagedDevicesWithAppFailures.GetManagedDevicesWithAppFailuresRequestBuilder GetManagedDevicesWithAppFailures
        {
            get => new global::Microsoft.Graph.Me.GetManagedDevicesWithAppFailures.GetManagedDevicesWithAppFailuresRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getMemberGroups method.</summary>
        public global::Microsoft.Graph.Me.GetMemberGroups.GetMemberGroupsRequestBuilder GetMemberGroups
        {
            get => new global::Microsoft.Graph.Me.GetMemberGroups.GetMemberGroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the getMemberObjects method.</summary>
        public global::Microsoft.Graph.Me.GetMemberObjects.GetMemberObjectsRequestBuilder GetMemberObjects
        {
            get => new global::Microsoft.Graph.Me.GetMemberObjects.GetMemberObjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the inferenceClassification property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.InferenceClassification.InferenceClassificationRequestBuilder InferenceClassification
        {
            get => new global::Microsoft.Graph.Me.InferenceClassification.InferenceClassificationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the insights property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Insights.InsightsRequestBuilder Insights
        {
            get => new global::Microsoft.Graph.Me.Insights.InsightsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the joinedTeams property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.JoinedTeams.JoinedTeamsRequestBuilder JoinedTeams
        {
            get => new global::Microsoft.Graph.Me.JoinedTeams.JoinedTeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the licenseDetails property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.LicenseDetails.LicenseDetailsRequestBuilder LicenseDetails
        {
            get => new global::Microsoft.Graph.Me.LicenseDetails.LicenseDetailsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mailboxSettings property</summary>
        public global::Microsoft.Graph.Me.MailboxSettings.MailboxSettingsRequestBuilder MailboxSettings
        {
            get => new global::Microsoft.Graph.Me.MailboxSettings.MailboxSettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the mailFolders property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.MailFolders.MailFoldersRequestBuilder MailFolders
        {
            get => new global::Microsoft.Graph.Me.MailFolders.MailFoldersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the managedAppRegistrations property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.ManagedAppRegistrations.ManagedAppRegistrationsRequestBuilder ManagedAppRegistrations
        {
            get => new global::Microsoft.Graph.Me.ManagedAppRegistrations.ManagedAppRegistrationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the managedDevices property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.ManagedDevices.ManagedDevicesRequestBuilder ManagedDevices
        {
            get => new global::Microsoft.Graph.Me.ManagedDevices.ManagedDevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the manager property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Manager.ManagerRequestBuilder Manager
        {
            get => new global::Microsoft.Graph.Me.Manager.ManagerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the memberOf property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.MemberOf.MemberOfRequestBuilder MemberOf
        {
            get => new global::Microsoft.Graph.Me.MemberOf.MemberOfRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the messages property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Messages.MessagesRequestBuilder Messages
        {
            get => new global::Microsoft.Graph.Me.Messages.MessagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the oauth2PermissionGrants property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Oauth2PermissionGrants.Oauth2PermissionGrantsRequestBuilder Oauth2PermissionGrants
        {
            get => new global::Microsoft.Graph.Me.Oauth2PermissionGrants.Oauth2PermissionGrantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the onenote property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Onenote.OnenoteRequestBuilder Onenote
        {
            get => new global::Microsoft.Graph.Me.Onenote.OnenoteRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the onlineMeetings property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.OnlineMeetings.OnlineMeetingsRequestBuilder OnlineMeetings
        {
            get => new global::Microsoft.Graph.Me.OnlineMeetings.OnlineMeetingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the outlook property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Outlook.OutlookRequestBuilder Outlook
        {
            get => new global::Microsoft.Graph.Me.Outlook.OutlookRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the ownedDevices property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.OwnedDevices.OwnedDevicesRequestBuilder OwnedDevices
        {
            get => new global::Microsoft.Graph.Me.OwnedDevices.OwnedDevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the ownedObjects property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.OwnedObjects.OwnedObjectsRequestBuilder OwnedObjects
        {
            get => new global::Microsoft.Graph.Me.OwnedObjects.OwnedObjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the people property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.People.PeopleRequestBuilder People
        {
            get => new global::Microsoft.Graph.Me.People.PeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the permissionGrants property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.PermissionGrants.PermissionGrantsRequestBuilder PermissionGrants
        {
            get => new global::Microsoft.Graph.Me.PermissionGrants.PermissionGrantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the photo property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Photo.PhotoRequestBuilder Photo
        {
            get => new global::Microsoft.Graph.Me.Photo.PhotoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the photos property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Photos.PhotosRequestBuilder Photos
        {
            get => new global::Microsoft.Graph.Me.Photos.PhotosRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the planner property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Planner.PlannerRequestBuilder Planner
        {
            get => new global::Microsoft.Graph.Me.Planner.PlannerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the presence property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Presence.PresenceRequestBuilder Presence
        {
            get => new global::Microsoft.Graph.Me.Presence.PresenceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the registeredDevices property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.RegisteredDevices.RegisteredDevicesRequestBuilder RegisteredDevices
        {
            get => new global::Microsoft.Graph.Me.RegisteredDevices.RegisteredDevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the removeAllDevicesFromManagement method.</summary>
        public global::Microsoft.Graph.Me.RemoveAllDevicesFromManagement.RemoveAllDevicesFromManagementRequestBuilder RemoveAllDevicesFromManagement
        {
            get => new global::Microsoft.Graph.Me.RemoveAllDevicesFromManagement.RemoveAllDevicesFromManagementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the reprocessLicenseAssignment method.</summary>
        public global::Microsoft.Graph.Me.ReprocessLicenseAssignment.ReprocessLicenseAssignmentRequestBuilder ReprocessLicenseAssignment
        {
            get => new global::Microsoft.Graph.Me.ReprocessLicenseAssignment.ReprocessLicenseAssignmentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the restore method.</summary>
        public global::Microsoft.Graph.Me.Restore.RestoreRequestBuilder Restore
        {
            get => new global::Microsoft.Graph.Me.Restore.RestoreRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the retryServiceProvisioning method.</summary>
        public global::Microsoft.Graph.Me.RetryServiceProvisioning.RetryServiceProvisioningRequestBuilder RetryServiceProvisioning
        {
            get => new global::Microsoft.Graph.Me.RetryServiceProvisioning.RetryServiceProvisioningRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the revokeSignInSessions method.</summary>
        public global::Microsoft.Graph.Me.RevokeSignInSessions.RevokeSignInSessionsRequestBuilder RevokeSignInSessions
        {
            get => new global::Microsoft.Graph.Me.RevokeSignInSessions.RevokeSignInSessionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the scopedRoleMemberOf property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.ScopedRoleMemberOf.ScopedRoleMemberOfRequestBuilder ScopedRoleMemberOf
        {
            get => new global::Microsoft.Graph.Me.ScopedRoleMemberOf.ScopedRoleMemberOfRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the sendMail method.</summary>
        public global::Microsoft.Graph.Me.SendMail.SendMailRequestBuilder SendMail
        {
            get => new global::Microsoft.Graph.Me.SendMail.SendMailRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The serviceProvisioningErrors property</summary>
        public global::Microsoft.Graph.Me.ServiceProvisioningErrors.ServiceProvisioningErrorsRequestBuilder ServiceProvisioningErrors
        {
            get => new global::Microsoft.Graph.Me.ServiceProvisioningErrors.ServiceProvisioningErrorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the settings property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Settings.SettingsRequestBuilder Settings
        {
            get => new global::Microsoft.Graph.Me.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the sponsors property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Sponsors.SponsorsRequestBuilder Sponsors
        {
            get => new global::Microsoft.Graph.Me.Sponsors.SponsorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the teamwork property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Teamwork.TeamworkRequestBuilder Teamwork
        {
            get => new global::Microsoft.Graph.Me.Teamwork.TeamworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the todo property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.Todo.TodoRequestBuilder Todo
        {
            get => new global::Microsoft.Graph.Me.Todo.TodoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the transitiveMemberOf property of the microsoft.graph.user entity.</summary>
        public global::Microsoft.Graph.Me.TransitiveMemberOf.TransitiveMemberOfRequestBuilder TransitiveMemberOf
        {
            get => new global::Microsoft.Graph.Me.TransitiveMemberOf.TransitiveMemberOfRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the translateExchangeIds method.</summary>
        public global::Microsoft.Graph.Me.TranslateExchangeIds.TranslateExchangeIdsRequestBuilder TranslateExchangeIds
        {
            get => new global::Microsoft.Graph.Me.TranslateExchangeIds.TranslateExchangeIdsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to call the wipeManagedAppRegistrationsByDeviceTag method.</summary>
        public global::Microsoft.Graph.Me.WipeManagedAppRegistrationsByDeviceTag.WipeManagedAppRegistrationsByDeviceTagRequestBuilder WipeManagedAppRegistrationsByDeviceTag
        {
            get => new global::Microsoft.Graph.Me.WipeManagedAppRegistrationsByDeviceTag.WipeManagedAppRegistrationsByDeviceTagRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Me.MeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/me{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Me.MeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/me{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Provides operations to call the exportDeviceAndAppManagementData method.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Me.ExportDeviceAndAppManagementDataWithSkipWithTop.ExportDeviceAndAppManagementDataWithSkipWithTopRequestBuilder"/></returns>
        /// <param name="skip">Usage: skip={skip}</param>
        /// <param name="top">Usage: top={top}</param>
        public global::Microsoft.Graph.Me.ExportDeviceAndAppManagementDataWithSkipWithTop.ExportDeviceAndAppManagementDataWithSkipWithTopRequestBuilder ExportDeviceAndAppManagementDataWithSkipWithTop(int? skip, int? top)
        {
            _ = skip ?? throw new ArgumentNullException(nameof(skip));
            _ = top ?? throw new ArgumentNullException(nameof(top));
            return new global::Microsoft.Graph.Me.ExportDeviceAndAppManagementDataWithSkipWithTop.ExportDeviceAndAppManagementDataWithSkipWithTopRequestBuilder(PathParameters, RequestAdapter, skip, top);
        }
        /// <summary>
        /// Retrieve the properties and relationships of user object. This operation returns by default only a subset of the more commonly used properties for each user. These default properties are noted in the Properties section. To get properties that are not returned by default, do a GET operation for the user and specify the properties in a $select OData query option. Because the user resource supports extensions, you can also use the GET operation to get custom properties and extension data in a user instance. Customers through Microsoft Entra ID for customers can also use this API operation to retrieve their details.
        /// Find more info here <see href="https://learn.microsoft.com/graph/api/user-get?view=graph-rest-1.0" />
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.User"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Microsoft.Graph.Models.User?> GetAsync(Action<RequestConfiguration<global::Microsoft.Graph.Me.MeRequestBuilder.MeRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Microsoft.Graph.Models.User> GetAsync(Action<RequestConfiguration<global::Microsoft.Graph.Me.MeRequestBuilder.MeRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Microsoft.Graph.Models.User>(requestInfo, global::Microsoft.Graph.Models.User.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the properties of a user object.
        /// Find more info here <see href="https://learn.microsoft.com/graph/api/user-update?view=graph-rest-1.0" />
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.User"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Microsoft.Graph.Models.ODataErrors.ODataError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Microsoft.Graph.Models.User?> PatchAsync(global::Microsoft.Graph.Models.User body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Microsoft.Graph.Models.User> PatchAsync(global::Microsoft.Graph.Models.User body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Microsoft.Graph.Models.ODataErrors.ODataError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Microsoft.Graph.Models.User>(requestInfo, global::Microsoft.Graph.Models.User.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Provides operations to call the reminderView method.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Me.ReminderViewWithStartDateTimeWithEndDateTime.ReminderViewWithStartDateTimeWithEndDateTimeRequestBuilder"/></returns>
        /// <param name="endDateTime">Usage: EndDateTime=&apos;{EndDateTime}&apos;</param>
        /// <param name="startDateTime">Usage: StartDateTime=&apos;{StartDateTime}&apos;</param>
        public global::Microsoft.Graph.Me.ReminderViewWithStartDateTimeWithEndDateTime.ReminderViewWithStartDateTimeWithEndDateTimeRequestBuilder ReminderViewWithStartDateTimeWithEndDateTime(string endDateTime, string startDateTime)
        {
            if(string.IsNullOrEmpty(endDateTime)) throw new ArgumentNullException(nameof(endDateTime));
            if(string.IsNullOrEmpty(startDateTime)) throw new ArgumentNullException(nameof(startDateTime));
            return new global::Microsoft.Graph.Me.ReminderViewWithStartDateTimeWithEndDateTime.ReminderViewWithStartDateTimeWithEndDateTimeRequestBuilder(PathParameters, RequestAdapter, endDateTime, startDateTime);
        }
        /// <summary>
        /// Retrieve the properties and relationships of user object. This operation returns by default only a subset of the more commonly used properties for each user. These default properties are noted in the Properties section. To get properties that are not returned by default, do a GET operation for the user and specify the properties in a $select OData query option. Because the user resource supports extensions, you can also use the GET operation to get custom properties and extension data in a user instance. Customers through Microsoft Entra ID for customers can also use this API operation to retrieve their details.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Microsoft.Graph.Me.MeRequestBuilder.MeRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Microsoft.Graph.Me.MeRequestBuilder.MeRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the properties of a user object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Microsoft.Graph.Models.User body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Microsoft.Graph.Models.User body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Me.MeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Microsoft.Graph.Me.MeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Microsoft.Graph.Me.MeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve the properties and relationships of user object. This operation returns by default only a subset of the more commonly used properties for each user. These default properties are noted in the Properties section. To get properties that are not returned by default, do a GET operation for the user and specify the properties in a $select OData query option. Because the user resource supports extensions, you can also use the GET operation to get custom properties and extension data in a user instance. Customers through Microsoft Entra ID for customers can also use this API operation to retrieve their details.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class MeRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class MeRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Microsoft.Graph.Me.MeRequestBuilder.MeRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class MeRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
