// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The type SiteRequest.
    /// </summary>
    public partial class SiteRequest : BaseRequest, ISiteRequest
    {
        /// <summary>
        /// Constructs a new SiteRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public SiteRequest(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Gets the specified Site.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The Site.</returns>
        public async System.Threading.Tasks.Task<Site> GetAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.GET;
            var retrievedEntity = await this.SendAsync<Site>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Gets the specified Site and returns a <see cref="GraphResponse{Site}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{Site}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<Site>> GetResponseAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.GET;
            return this.SendAsyncWithGraphResponse<Site>(null, cancellationToken);
        }

        /// <summary>
        /// Updates the specified Site using PATCH.
        /// </summary>
        /// <param name="siteToUpdate">The Site to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated Site.</returns>
        public async System.Threading.Tasks.Task<Site> UpdateAsync(Site siteToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            var updatedEntity = await this.SendAsync<Site>(siteToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified Site using PATCH and returns a <see cref="GraphResponse{Site}"/> object.
        /// </summary>
        /// <param name="siteToUpdate">The Site to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{Site}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<Site>> UpdateResponseAsync(Site siteToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            return this.SendAsyncWithGraphResponse<Site>(siteToUpdate, cancellationToken);
        }

        /// <summary>
        /// Updates the specified Site using PUT.
        /// </summary>
        /// <param name="siteToUpdate">The Site object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task<Site> PutAsync(Site siteToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            var updatedEntity = await this.SendAsync<Site>(siteToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified Site using PUT and returns a <see cref="GraphResponse{Site}"/> object.
        /// </summary>
        /// <param name="siteToUpdate">The Site object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await of <see cref="GraphResponse{Site}"/>.</returns>
        public System.Threading.Tasks.Task<GraphResponse<Site>> PutResponseAsync(Site siteToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            return this.SendAsyncWithGraphResponse<Site>(siteToUpdate, cancellationToken);
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public ISiteRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        public ISiteRequest Expand(Expression<Func<Site, object>> expandExpression)
        {
		    if (expandExpression == null)
            {
                throw new ArgumentNullException(nameof(expandExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(expandExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(expandExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$expand", value));
            }
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public ISiteRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        public ISiteRequest Select(Expression<Func<Site, object>> selectExpression)
        {
            if (selectExpression == null)
            {
                throw new ArgumentNullException(nameof(selectExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(selectExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(selectExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$select", value));
            }
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="siteToInitialize">The <see cref="Site"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(Site siteToInitialize)
        {

            if (siteToInitialize != null)
            {
                if (siteToInitialize.Columns != null && siteToInitialize.Columns.CurrentPage != null)
                {
                    siteToInitialize.Columns.InitializeNextPageRequest(this.Client, siteToInitialize.ColumnsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.Columns.AdditionalData = siteToInitialize.AdditionalData;
                }
                if (siteToInitialize.ContentTypes != null && siteToInitialize.ContentTypes.CurrentPage != null)
                {
                    siteToInitialize.ContentTypes.InitializeNextPageRequest(this.Client, siteToInitialize.ContentTypesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.ContentTypes.AdditionalData = siteToInitialize.AdditionalData;
                }
                if (siteToInitialize.Drives != null && siteToInitialize.Drives.CurrentPage != null)
                {
                    siteToInitialize.Drives.InitializeNextPageRequest(this.Client, siteToInitialize.DrivesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.Drives.AdditionalData = siteToInitialize.AdditionalData;
                }
                if (siteToInitialize.ExternalColumns != null && siteToInitialize.ExternalColumns.CurrentPage != null)
                {
                    siteToInitialize.ExternalColumns.InitializeNextPageRequest(this.Client, siteToInitialize.ExternalColumnsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.ExternalColumns.AdditionalData = siteToInitialize.AdditionalData;
                }
                if (siteToInitialize.Items != null && siteToInitialize.Items.CurrentPage != null)
                {
                    siteToInitialize.Items.InitializeNextPageRequest(this.Client, siteToInitialize.ItemsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.Items.AdditionalData = siteToInitialize.AdditionalData;
                }
                if (siteToInitialize.Lists != null && siteToInitialize.Lists.CurrentPage != null)
                {
                    siteToInitialize.Lists.InitializeNextPageRequest(this.Client, siteToInitialize.ListsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.Lists.AdditionalData = siteToInitialize.AdditionalData;
                }
                if (siteToInitialize.Permissions != null && siteToInitialize.Permissions.CurrentPage != null)
                {
                    siteToInitialize.Permissions.InitializeNextPageRequest(this.Client, siteToInitialize.PermissionsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.Permissions.AdditionalData = siteToInitialize.AdditionalData;
                }
                if (siteToInitialize.Sites != null && siteToInitialize.Sites.CurrentPage != null)
                {
                    siteToInitialize.Sites.InitializeNextPageRequest(this.Client, siteToInitialize.SitesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.Sites.AdditionalData = siteToInitialize.AdditionalData;
                }
                if (siteToInitialize.TermStores != null && siteToInitialize.TermStores.CurrentPage != null)
                {
                    siteToInitialize.TermStores.InitializeNextPageRequest(this.Client, siteToInitialize.TermStoresNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    siteToInitialize.TermStores.AdditionalData = siteToInitialize.AdditionalData;
                }

            }


        }
    }
}
