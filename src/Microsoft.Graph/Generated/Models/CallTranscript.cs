// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Models {
    public class CallTranscript : Entity, IParsable {
        /// <summary>The content property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Content {
            get { return BackingStore?.Get<byte[]?>("content"); }
            set { BackingStore?.Set("content", value); }
        }
#nullable restore
#else
        public byte[] Content {
            get { return BackingStore?.Get<byte[]>("content"); }
            set { BackingStore?.Set("content", value); }
        }
#endif
        /// <summary>The createdDateTime property</summary>
        public DateTimeOffset? CreatedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>The meetingId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeetingId {
            get { return BackingStore?.Get<string?>("meetingId"); }
            set { BackingStore?.Set("meetingId", value); }
        }
#nullable restore
#else
        public string MeetingId {
            get { return BackingStore?.Get<string>("meetingId"); }
            set { BackingStore?.Set("meetingId", value); }
        }
#endif
        /// <summary>The meetingOrganizer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IdentitySet? MeetingOrganizer {
            get { return BackingStore?.Get<IdentitySet?>("meetingOrganizer"); }
            set { BackingStore?.Set("meetingOrganizer", value); }
        }
#nullable restore
#else
        public IdentitySet MeetingOrganizer {
            get { return BackingStore?.Get<IdentitySet>("meetingOrganizer"); }
            set { BackingStore?.Set("meetingOrganizer", value); }
        }
#endif
        /// <summary>The metadataContent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? MetadataContent {
            get { return BackingStore?.Get<byte[]?>("metadataContent"); }
            set { BackingStore?.Set("metadataContent", value); }
        }
#nullable restore
#else
        public byte[] MetadataContent {
            get { return BackingStore?.Get<byte[]>("metadataContent"); }
            set { BackingStore?.Set("metadataContent", value); }
        }
#endif
        /// <summary>The transcriptContentUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TranscriptContentUrl {
            get { return BackingStore?.Get<string?>("transcriptContentUrl"); }
            set { BackingStore?.Set("transcriptContentUrl", value); }
        }
#nullable restore
#else
        public string TranscriptContentUrl {
            get { return BackingStore?.Get<string>("transcriptContentUrl"); }
            set { BackingStore?.Set("transcriptContentUrl", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CallTranscript CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CallTranscript();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"content", n => { Content = n.GetByteArrayValue(); } },
                {"createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"meetingId", n => { MeetingId = n.GetStringValue(); } },
                {"meetingOrganizer", n => { MeetingOrganizer = n.GetObjectValue<IdentitySet>(IdentitySet.CreateFromDiscriminatorValue); } },
                {"metadataContent", n => { MetadataContent = n.GetByteArrayValue(); } },
                {"transcriptContentUrl", n => { TranscriptContentUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteByteArrayValue("content", Content);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("meetingId", MeetingId);
            writer.WriteObjectValue<IdentitySet>("meetingOrganizer", MeetingOrganizer);
            writer.WriteByteArrayValue("metadataContent", MetadataContent);
            writer.WriteStringValue("transcriptContentUrl", TranscriptContentUrl);
        }
    }
}
