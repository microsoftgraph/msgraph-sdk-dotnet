// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class UserSettings : global::Microsoft.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Reflects the organization level setting controlling delegate access to the trending API. When set to true, the organization doesn&apos;t have access to Office Delve. The relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected for the whole organization. This setting is read-only and can only be changed by administrators in the SharePoint admin center.</summary>
        public bool? ContributionToContentDiscoveryAsOrganizationDisabled
        {
            get { return BackingStore?.Get<bool?>("contributionToContentDiscoveryAsOrganizationDisabled"); }
            set { BackingStore?.Set("contributionToContentDiscoveryAsOrganizationDisabled", value); }
        }
        /// <summary>When set to true, the delegate access to the user&apos;s trending API is disabled. When set to true, documents in the user&apos;s Office Delve are disabled. When set to true, the relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected. Users can control this setting in Office Delve.</summary>
        public bool? ContributionToContentDiscoveryDisabled
        {
            get { return BackingStore?.Get<bool?>("contributionToContentDiscoveryDisabled"); }
            set { BackingStore?.Set("contributionToContentDiscoveryDisabled", value); }
        }
        /// <summary>The user&apos;s settings for the visibility of meeting hour insights, and insights derived between a user and other items in Microsoft 365, such as documents or sites. Get userInsightsSettings through this navigation property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.UserInsightsSettings? ItemInsights
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserInsightsSettings?>("itemInsights"); }
            set { BackingStore?.Set("itemInsights", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.UserInsightsSettings ItemInsights
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserInsightsSettings>("itemInsights"); }
            set { BackingStore?.Set("itemInsights", value); }
        }
#endif
        /// <summary>The shiftPreferences property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.ShiftPreferences? ShiftPreferences
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.ShiftPreferences?>("shiftPreferences"); }
            set { BackingStore?.Set("shiftPreferences", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.ShiftPreferences ShiftPreferences
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.ShiftPreferences>("shiftPreferences"); }
            set { BackingStore?.Set("shiftPreferences", value); }
        }
#endif
        /// <summary>The storage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.UserStorage? Storage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserStorage?>("storage"); }
            set { BackingStore?.Set("storage", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.UserStorage Storage
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserStorage>("storage"); }
            set { BackingStore?.Set("storage", value); }
        }
#endif
        /// <summary>The windows property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.WindowsSetting>? Windows
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsSetting>?>("windows"); }
            set { BackingStore?.Set("windows", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.WindowsSetting> Windows
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsSetting>>("windows"); }
            set { BackingStore?.Set("windows", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.UserSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Models.UserSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Models.UserSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "contributionToContentDiscoveryAsOrganizationDisabled", n => { ContributionToContentDiscoveryAsOrganizationDisabled = n.GetBoolValue(); } },
                { "contributionToContentDiscoveryDisabled", n => { ContributionToContentDiscoveryDisabled = n.GetBoolValue(); } },
                { "itemInsights", n => { ItemInsights = n.GetObjectValue<global::Microsoft.Graph.Models.UserInsightsSettings>(global::Microsoft.Graph.Models.UserInsightsSettings.CreateFromDiscriminatorValue); } },
                { "shiftPreferences", n => { ShiftPreferences = n.GetObjectValue<global::Microsoft.Graph.Models.ShiftPreferences>(global::Microsoft.Graph.Models.ShiftPreferences.CreateFromDiscriminatorValue); } },
                { "storage", n => { Storage = n.GetObjectValue<global::Microsoft.Graph.Models.UserStorage>(global::Microsoft.Graph.Models.UserStorage.CreateFromDiscriminatorValue); } },
                { "windows", n => { Windows = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsSetting>(global::Microsoft.Graph.Models.WindowsSetting.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("contributionToContentDiscoveryAsOrganizationDisabled", ContributionToContentDiscoveryAsOrganizationDisabled);
            writer.WriteBoolValue("contributionToContentDiscoveryDisabled", ContributionToContentDiscoveryDisabled);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.UserInsightsSettings>("itemInsights", ItemInsights);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.ShiftPreferences>("shiftPreferences", ShiftPreferences);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.UserStorage>("storage", Storage);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsSetting>("windows", Windows);
        }
    }
}
