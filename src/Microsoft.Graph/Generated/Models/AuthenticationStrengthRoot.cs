// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class AuthenticationStrengthRoot : global::Microsoft.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Names and descriptions of all valid authentication method modes in the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.AuthenticationMethodModeDetail>? AuthenticationMethodModes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AuthenticationMethodModeDetail>?>("authenticationMethodModes"); }
            set { BackingStore?.Set("authenticationMethodModes", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.AuthenticationMethodModeDetail> AuthenticationMethodModes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AuthenticationMethodModeDetail>>("authenticationMethodModes"); }
            set { BackingStore?.Set("authenticationMethodModes", value); }
        }
#endif
        /// <summary>The combinations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.AuthenticationMethodModes?>? Combinations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AuthenticationMethodModes?>?>("combinations"); }
            set { BackingStore?.Set("combinations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.AuthenticationMethodModes?> Combinations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AuthenticationMethodModes?>>("combinations"); }
            set { BackingStore?.Set("combinations", value); }
        }
#endif
        /// <summary>A collection of authentication strength policies that exist for this tenant, including both built-in and custom policies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.AuthenticationStrengthPolicy>? Policies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AuthenticationStrengthPolicy>?>("policies"); }
            set { BackingStore?.Set("policies", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.AuthenticationStrengthPolicy> Policies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AuthenticationStrengthPolicy>>("policies"); }
            set { BackingStore?.Set("policies", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.AuthenticationStrengthRoot"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Models.AuthenticationStrengthRoot CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Models.AuthenticationStrengthRoot();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authenticationMethodModes", n => { AuthenticationMethodModes = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.AuthenticationMethodModeDetail>(global::Microsoft.Graph.Models.AuthenticationMethodModeDetail.CreateFromDiscriminatorValue)?.AsList(); } },
                { "combinations", n => { Combinations = n.GetCollectionOfEnumValues<global::Microsoft.Graph.Models.AuthenticationMethodModes>()?.AsList(); } },
                { "policies", n => { Policies = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.AuthenticationStrengthPolicy>(global::Microsoft.Graph.Models.AuthenticationStrengthPolicy.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.AuthenticationMethodModeDetail>("authenticationMethodModes", AuthenticationMethodModes);
            writer.WriteCollectionOfEnumValues<global::Microsoft.Graph.Models.AuthenticationMethodModes>("combinations", Combinations);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.AuthenticationStrengthPolicy>("policies", Policies);
        }
    }
}
