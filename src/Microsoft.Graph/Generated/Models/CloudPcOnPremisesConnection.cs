// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Models {
    public class CloudPcOnPremisesConnection : Entity, IParsable 
    {
        /// <summary>The adDomainName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdDomainName {
            get { return BackingStore?.Get<string?>("adDomainName"); }
            set { BackingStore?.Set("adDomainName", value); }
        }
#nullable restore
#else
        public string AdDomainName {
            get { return BackingStore?.Get<string>("adDomainName"); }
            set { BackingStore?.Set("adDomainName", value); }
        }
#endif
        /// <summary>The adDomainPassword property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdDomainPassword {
            get { return BackingStore?.Get<string?>("adDomainPassword"); }
            set { BackingStore?.Set("adDomainPassword", value); }
        }
#nullable restore
#else
        public string AdDomainPassword {
            get { return BackingStore?.Get<string>("adDomainPassword"); }
            set { BackingStore?.Set("adDomainPassword", value); }
        }
#endif
        /// <summary>The adDomainUsername property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdDomainUsername {
            get { return BackingStore?.Get<string?>("adDomainUsername"); }
            set { BackingStore?.Set("adDomainUsername", value); }
        }
#nullable restore
#else
        public string AdDomainUsername {
            get { return BackingStore?.Get<string>("adDomainUsername"); }
            set { BackingStore?.Set("adDomainUsername", value); }
        }
#endif
        /// <summary>The alternateResourceUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlternateResourceUrl {
            get { return BackingStore?.Get<string?>("alternateResourceUrl"); }
            set { BackingStore?.Set("alternateResourceUrl", value); }
        }
#nullable restore
#else
        public string AlternateResourceUrl {
            get { return BackingStore?.Get<string>("alternateResourceUrl"); }
            set { BackingStore?.Set("alternateResourceUrl", value); }
        }
#endif
        /// <summary>The connectionType property</summary>
        public CloudPcOnPremisesConnectionType? ConnectionType {
            get { return BackingStore?.Get<CloudPcOnPremisesConnectionType?>("connectionType"); }
            set { BackingStore?.Set("connectionType", value); }
        }
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The healthCheckStatus property</summary>
        public CloudPcOnPremisesConnectionStatus? HealthCheckStatus {
            get { return BackingStore?.Get<CloudPcOnPremisesConnectionStatus?>("healthCheckStatus"); }
            set { BackingStore?.Set("healthCheckStatus", value); }
        }
        /// <summary>The healthCheckStatusDetail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CloudPcOnPremisesConnectionStatusDetail? HealthCheckStatusDetail {
            get { return BackingStore?.Get<CloudPcOnPremisesConnectionStatusDetail?>("healthCheckStatusDetail"); }
            set { BackingStore?.Set("healthCheckStatusDetail", value); }
        }
#nullable restore
#else
        public CloudPcOnPremisesConnectionStatusDetail HealthCheckStatusDetail {
            get { return BackingStore?.Get<CloudPcOnPremisesConnectionStatusDetail>("healthCheckStatusDetail"); }
            set { BackingStore?.Set("healthCheckStatusDetail", value); }
        }
#endif
        /// <summary>The inUse property</summary>
        public bool? InUse {
            get { return BackingStore?.Get<bool?>("inUse"); }
            set { BackingStore?.Set("inUse", value); }
        }
        /// <summary>The organizationalUnit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganizationalUnit {
            get { return BackingStore?.Get<string?>("organizationalUnit"); }
            set { BackingStore?.Set("organizationalUnit", value); }
        }
#nullable restore
#else
        public string OrganizationalUnit {
            get { return BackingStore?.Get<string>("organizationalUnit"); }
            set { BackingStore?.Set("organizationalUnit", value); }
        }
#endif
        /// <summary>The resourceGroupId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceGroupId {
            get { return BackingStore?.Get<string?>("resourceGroupId"); }
            set { BackingStore?.Set("resourceGroupId", value); }
        }
#nullable restore
#else
        public string ResourceGroupId {
            get { return BackingStore?.Get<string>("resourceGroupId"); }
            set { BackingStore?.Set("resourceGroupId", value); }
        }
#endif
        /// <summary>The subnetId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubnetId {
            get { return BackingStore?.Get<string?>("subnetId"); }
            set { BackingStore?.Set("subnetId", value); }
        }
#nullable restore
#else
        public string SubnetId {
            get { return BackingStore?.Get<string>("subnetId"); }
            set { BackingStore?.Set("subnetId", value); }
        }
#endif
        /// <summary>The subscriptionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionId {
            get { return BackingStore?.Get<string?>("subscriptionId"); }
            set { BackingStore?.Set("subscriptionId", value); }
        }
#nullable restore
#else
        public string SubscriptionId {
            get { return BackingStore?.Get<string>("subscriptionId"); }
            set { BackingStore?.Set("subscriptionId", value); }
        }
#endif
        /// <summary>The subscriptionName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionName {
            get { return BackingStore?.Get<string?>("subscriptionName"); }
            set { BackingStore?.Set("subscriptionName", value); }
        }
#nullable restore
#else
        public string SubscriptionName {
            get { return BackingStore?.Get<string>("subscriptionName"); }
            set { BackingStore?.Set("subscriptionName", value); }
        }
#endif
        /// <summary>The virtualNetworkId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VirtualNetworkId {
            get { return BackingStore?.Get<string?>("virtualNetworkId"); }
            set { BackingStore?.Set("virtualNetworkId", value); }
        }
#nullable restore
#else
        public string VirtualNetworkId {
            get { return BackingStore?.Get<string>("virtualNetworkId"); }
            set { BackingStore?.Set("virtualNetworkId", value); }
        }
#endif
        /// <summary>The virtualNetworkLocation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VirtualNetworkLocation {
            get { return BackingStore?.Get<string?>("virtualNetworkLocation"); }
            set { BackingStore?.Set("virtualNetworkLocation", value); }
        }
#nullable restore
#else
        public string VirtualNetworkLocation {
            get { return BackingStore?.Get<string>("virtualNetworkLocation"); }
            set { BackingStore?.Set("virtualNetworkLocation", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CloudPcOnPremisesConnection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CloudPcOnPremisesConnection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CloudPcOnPremisesConnection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"adDomainName", n => { AdDomainName = n.GetStringValue(); } },
                {"adDomainPassword", n => { AdDomainPassword = n.GetStringValue(); } },
                {"adDomainUsername", n => { AdDomainUsername = n.GetStringValue(); } },
                {"alternateResourceUrl", n => { AlternateResourceUrl = n.GetStringValue(); } },
                {"connectionType", n => { ConnectionType = n.GetEnumValue<CloudPcOnPremisesConnectionType>(); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"healthCheckStatus", n => { HealthCheckStatus = n.GetEnumValue<CloudPcOnPremisesConnectionStatus>(); } },
                {"healthCheckStatusDetail", n => { HealthCheckStatusDetail = n.GetObjectValue<CloudPcOnPremisesConnectionStatusDetail>(CloudPcOnPremisesConnectionStatusDetail.CreateFromDiscriminatorValue); } },
                {"inUse", n => { InUse = n.GetBoolValue(); } },
                {"organizationalUnit", n => { OrganizationalUnit = n.GetStringValue(); } },
                {"resourceGroupId", n => { ResourceGroupId = n.GetStringValue(); } },
                {"subnetId", n => { SubnetId = n.GetStringValue(); } },
                {"subscriptionId", n => { SubscriptionId = n.GetStringValue(); } },
                {"subscriptionName", n => { SubscriptionName = n.GetStringValue(); } },
                {"virtualNetworkId", n => { VirtualNetworkId = n.GetStringValue(); } },
                {"virtualNetworkLocation", n => { VirtualNetworkLocation = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("adDomainName", AdDomainName);
            writer.WriteStringValue("adDomainPassword", AdDomainPassword);
            writer.WriteStringValue("adDomainUsername", AdDomainUsername);
            writer.WriteStringValue("alternateResourceUrl", AlternateResourceUrl);
            writer.WriteEnumValue<CloudPcOnPremisesConnectionType>("connectionType", ConnectionType);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteEnumValue<CloudPcOnPremisesConnectionStatus>("healthCheckStatus", HealthCheckStatus);
            writer.WriteObjectValue<CloudPcOnPremisesConnectionStatusDetail>("healthCheckStatusDetail", HealthCheckStatusDetail);
            writer.WriteBoolValue("inUse", InUse);
            writer.WriteStringValue("organizationalUnit", OrganizationalUnit);
            writer.WriteStringValue("resourceGroupId", ResourceGroupId);
            writer.WriteStringValue("subnetId", SubnetId);
            writer.WriteStringValue("subscriptionId", SubscriptionId);
            writer.WriteStringValue("subscriptionName", SubscriptionName);
            writer.WriteStringValue("virtualNetworkId", VirtualNetworkId);
            writer.WriteStringValue("virtualNetworkLocation", VirtualNetworkLocation);
        }
    }
}
