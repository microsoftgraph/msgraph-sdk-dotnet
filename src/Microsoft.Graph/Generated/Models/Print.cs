// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class Print : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The list of available print connectors.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.PrintConnector>? Connectors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrintConnector>?>("connectors"); }
            set { BackingStore?.Set("connectors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.PrintConnector> Connectors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrintConnector>>("connectors"); }
            set { BackingStore?.Set("connectors", value); }
        }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The list of print long running operations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.PrintOperation>? Operations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrintOperation>?>("operations"); }
            set { BackingStore?.Set("operations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.PrintOperation> Operations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrintOperation>>("operations"); }
            set { BackingStore?.Set("operations", value); }
        }
#endif
        /// <summary>The list of printers registered in the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.Printer>? Printers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.Printer>?>("printers"); }
            set { BackingStore?.Set("printers", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.Printer> Printers
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.Printer>>("printers"); }
            set { BackingStore?.Set("printers", value); }
        }
#endif
        /// <summary>The list of available Universal Print service endpoints.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.PrintService>? Services
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrintService>?>("services"); }
            set { BackingStore?.Set("services", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.PrintService> Services
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrintService>>("services"); }
            set { BackingStore?.Set("services", value); }
        }
#endif
        /// <summary>Tenant-wide settings for the Universal Print service.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.PrintSettings? Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.PrintSettings?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.PrintSettings Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.PrintSettings>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>The list of printer shares registered in the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.PrinterShare>? Shares
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrinterShare>?>("shares"); }
            set { BackingStore?.Set("shares", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.PrinterShare> Shares
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrinterShare>>("shares"); }
            set { BackingStore?.Set("shares", value); }
        }
#endif
        /// <summary>List of abstract definition for a task that can be triggered when various events occur within Universal Print.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.PrintTaskDefinition>? TaskDefinitions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrintTaskDefinition>?>("taskDefinitions"); }
            set { BackingStore?.Set("taskDefinitions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.PrintTaskDefinition> TaskDefinitions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.PrintTaskDefinition>>("taskDefinitions"); }
            set { BackingStore?.Set("taskDefinitions", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Graph.Models.Print"/> and sets the default values.
        /// </summary>
        public Print()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.Print"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Graph.Models.Print CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Models.Print();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "connectors", n => { Connectors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.PrintConnector>(global::Microsoft.Graph.Models.PrintConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "operations", n => { Operations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.PrintOperation>(global::Microsoft.Graph.Models.PrintOperation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "printers", n => { Printers = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.Printer>(global::Microsoft.Graph.Models.Printer.CreateFromDiscriminatorValue)?.AsList(); } },
                { "services", n => { Services = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.PrintService>(global::Microsoft.Graph.Models.PrintService.CreateFromDiscriminatorValue)?.AsList(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Microsoft.Graph.Models.PrintSettings>(global::Microsoft.Graph.Models.PrintSettings.CreateFromDiscriminatorValue); } },
                { "shares", n => { Shares = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.PrinterShare>(global::Microsoft.Graph.Models.PrinterShare.CreateFromDiscriminatorValue)?.AsList(); } },
                { "taskDefinitions", n => { TaskDefinitions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.PrintTaskDefinition>(global::Microsoft.Graph.Models.PrintTaskDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.PrintConnector>("connectors", Connectors);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.PrintOperation>("operations", Operations);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.Printer>("printers", Printers);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.PrintService>("services", Services);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.PrintSettings>("settings", Settings);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.PrinterShare>("shares", Shares);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.PrintTaskDefinition>("taskDefinitions", TaskDefinitions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
