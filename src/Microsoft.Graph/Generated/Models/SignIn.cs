// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class SignIn : global::Microsoft.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>App name displayed in the Microsoft Entra admin center.  Supports $filter (eq, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppDisplayName
        {
            get { return BackingStore?.Get<string?>("appDisplayName"); }
            set { BackingStore?.Set("appDisplayName", value); }
        }
#nullable restore
#else
        public string AppDisplayName
        {
            get { return BackingStore?.Get<string>("appDisplayName"); }
            set { BackingStore?.Set("appDisplayName", value); }
        }
#endif
        /// <summary>Unique GUID that represents the app ID in the Microsoft Entra ID.  Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId
        {
            get { return BackingStore?.Get<string?>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#nullable restore
#else
        public string AppId
        {
            get { return BackingStore?.Get<string>("appId"); }
            set { BackingStore?.Set("appId", value); }
        }
#endif
        /// <summary>Provides a list of conditional access policies that the corresponding sign-in activity triggers. Apps need more Conditional Access-related privileges to read the details of this property. For more information, see Viewing applied conditional access (CA) policies in sign-ins.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.AppliedConditionalAccessPolicy>? AppliedConditionalAccessPolicies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AppliedConditionalAccessPolicy>?>("appliedConditionalAccessPolicies"); }
            set { BackingStore?.Set("appliedConditionalAccessPolicies", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.AppliedConditionalAccessPolicy> AppliedConditionalAccessPolicies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AppliedConditionalAccessPolicy>>("appliedConditionalAccessPolicies"); }
            set { BackingStore?.Set("appliedConditionalAccessPolicies", value); }
        }
#endif
        /// <summary>Identifies the client used for the sign-in activity. Modern authentication clients include Browser, modern clients. Legacy authentication clients include Exchange ActiveSync, IMAP, MAPI, SMTP, POP, and other clients.  Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientAppUsed
        {
            get { return BackingStore?.Get<string?>("clientAppUsed"); }
            set { BackingStore?.Set("clientAppUsed", value); }
        }
#nullable restore
#else
        public string ClientAppUsed
        {
            get { return BackingStore?.Get<string>("clientAppUsed"); }
            set { BackingStore?.Set("clientAppUsed", value); }
        }
#endif
        /// <summary>Reports status of an activated conditional access policy. Possible values are: success, failure, notApplied, and unknownFutureValue.  Supports $filter (eq).</summary>
        public global::Microsoft.Graph.Models.ConditionalAccessStatus? ConditionalAccessStatus
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.ConditionalAccessStatus?>("conditionalAccessStatus"); }
            set { BackingStore?.Set("conditionalAccessStatus", value); }
        }
        /// <summary>The request ID sent from the client when the sign-in is initiated. Used to troubleshoot sign-in activity.  Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CorrelationId
        {
            get { return BackingStore?.Get<string?>("correlationId"); }
            set { BackingStore?.Set("correlationId", value); }
        }
#nullable restore
#else
        public string CorrelationId
        {
            get { return BackingStore?.Get<string>("correlationId"); }
            set { BackingStore?.Set("correlationId", value); }
        }
#endif
        /// <summary>Date and time (UTC) the sign-in was initiated. Example: midnight on Jan 1, 2014 is reported as 2014-01-01T00:00:00Z.  Supports $orderby, $filter (eq, le, and ge).</summary>
        public DateTimeOffset? CreatedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("createdDateTime"); }
            set { BackingStore?.Set("createdDateTime", value); }
        }
        /// <summary>Device information from where the sign-in occurred; includes device ID, operating system, and browser.  Supports $filter (eq, startsWith) on browser and operatingSytem properties.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.DeviceDetail? DeviceDetail
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceDetail?>("deviceDetail"); }
            set { BackingStore?.Set("deviceDetail", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.DeviceDetail DeviceDetail
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceDetail>("deviceDetail"); }
            set { BackingStore?.Set("deviceDetail", value); }
        }
#endif
        /// <summary>IP address of the client used to sign in.  Supports $filter (eq, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress
        {
            get { return BackingStore?.Get<string?>("ipAddress"); }
            set { BackingStore?.Set("ipAddress", value); }
        }
#nullable restore
#else
        public string IpAddress
        {
            get { return BackingStore?.Get<string>("ipAddress"); }
            set { BackingStore?.Set("ipAddress", value); }
        }
#endif
        /// <summary>Indicates whether a sign-in is interactive.</summary>
        public bool? IsInteractive
        {
            get { return BackingStore?.Get<bool?>("isInteractive"); }
            set { BackingStore?.Set("isInteractive", value); }
        }
        /// <summary>Provides the city, state, and country code where the sign-in originated.  Supports $filter (eq, startsWith) on city, state, and countryOrRegion properties.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.SignInLocation? Location
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.SignInLocation?>("location"); }
            set { BackingStore?.Set("location", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.SignInLocation Location
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.SignInLocation>("location"); }
            set { BackingStore?.Set("location", value); }
        }
#endif
        /// <summary>Name of the resource the user signed into.  Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceDisplayName
        {
            get { return BackingStore?.Get<string?>("resourceDisplayName"); }
            set { BackingStore?.Set("resourceDisplayName", value); }
        }
#nullable restore
#else
        public string ResourceDisplayName
        {
            get { return BackingStore?.Get<string>("resourceDisplayName"); }
            set { BackingStore?.Set("resourceDisplayName", value); }
        }
#endif
        /// <summary>ID of the resource that the user signed into.  Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceId
        {
            get { return BackingStore?.Get<string?>("resourceId"); }
            set { BackingStore?.Set("resourceId", value); }
        }
#nullable restore
#else
        public string ResourceId
        {
            get { return BackingStore?.Get<string>("resourceId"); }
            set { BackingStore?.Set("resourceId", value); }
        }
#endif
        /// <summary>The reason behind a specific state of a risky user, sign-in, or a risk event. The possible values are none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, hidden, adminConfirmedUserCompromised, unknownFutureValue, adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal, m365DAdminDismissedDetection, userChangedPasswordOnPremises, adminDismissedRiskForSignIn, adminConfirmedAccountSafe. You must use the Prefer: include-unknown-enum-members request header to get the following value or values in this evolvable enum: adminConfirmedServicePrincipalCompromised, adminDismissedAllRiskForServicePrincipal, m365DAdminDismissedDetection, userChangedPasswordOnPremises, adminDismissedRiskForSignIn, adminConfirmedAccountSafe.The value none means that Microsoft Entra risk detection did not flag the user or the sign-in as a risky event so far.  Supports $filter (eq). Note: Details for this property are only available for Microsoft Entra ID P2 customers. All other customers are returned hidden.</summary>
        public global::Microsoft.Graph.Models.RiskDetail? RiskDetail
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.RiskDetail?>("riskDetail"); }
            set { BackingStore?.Set("riskDetail", value); }
        }
        /// <summary>The riskEventTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.RiskEventType?>? RiskEventTypes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.RiskEventType?>?>("riskEventTypes"); }
            set { BackingStore?.Set("riskEventTypes", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.RiskEventType?> RiskEventTypes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.RiskEventType?>>("riskEventTypes"); }
            set { BackingStore?.Set("riskEventTypes", value); }
        }
#endif
        /// <summary>The list of risk event types associated with the sign-in. Possible values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence, generic, or unknownFutureValue.  Supports $filter (eq, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RiskEventTypesV2
        {
            get { return BackingStore?.Get<List<string>?>("riskEventTypes_v2"); }
            set { BackingStore?.Set("riskEventTypes_v2", value); }
        }
#nullable restore
#else
        public List<string> RiskEventTypesV2
        {
            get { return BackingStore?.Get<List<string>>("riskEventTypes_v2"); }
            set { BackingStore?.Set("riskEventTypes_v2", value); }
        }
#endif
        /// <summary>Aggregated risk level. The possible values are: none, low, medium, high, hidden, and unknownFutureValue. The value hidden means the user or sign-in wasn&apos;t enabled for Microsoft Entra ID Protection.  Supports $filter (eq).  Note: Details for this property are only available for Microsoft Entra ID P2 customers. All other customers are returned hidden.</summary>
        public global::Microsoft.Graph.Models.RiskLevel? RiskLevelAggregated
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.RiskLevel?>("riskLevelAggregated"); }
            set { BackingStore?.Set("riskLevelAggregated", value); }
        }
        /// <summary>Risk level during sign-in. The possible values are: none, low, medium, high, hidden, and unknownFutureValue. The value hidden means the user or sign-in wasn&apos;t enabled for Microsoft Entra ID Protection.  Supports $filter (eq). Note: Details for this property are only available for Microsoft Entra ID P2 customers. All other customers are returned hidden.</summary>
        public global::Microsoft.Graph.Models.RiskLevel? RiskLevelDuringSignIn
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.RiskLevel?>("riskLevelDuringSignIn"); }
            set { BackingStore?.Set("riskLevelDuringSignIn", value); }
        }
        /// <summary>Reports status of the risky user, sign-in, or a risk event. The possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.  Supports $filter (eq).</summary>
        public global::Microsoft.Graph.Models.RiskState? RiskState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.RiskState?>("riskState"); }
            set { BackingStore?.Set("riskState", value); }
        }
        /// <summary>Sign-in status. Includes the error code and description of the error (if a sign-in failure occurs).  Supports $filter (eq) on errorCode property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.SignInStatus? Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.SignInStatus?>("status"); }
            set { BackingStore?.Set("status", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.SignInStatus Status
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.SignInStatus>("status"); }
            set { BackingStore?.Set("status", value); }
        }
#endif
        /// <summary>Display name of the user that initiated the sign-in.  Supports $filter (eq, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserDisplayName
        {
            get { return BackingStore?.Get<string?>("userDisplayName"); }
            set { BackingStore?.Set("userDisplayName", value); }
        }
#nullable restore
#else
        public string UserDisplayName
        {
            get { return BackingStore?.Get<string>("userDisplayName"); }
            set { BackingStore?.Set("userDisplayName", value); }
        }
#endif
        /// <summary>ID of the user that initiated the sign-in.  Supports $filter (eq).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId
        {
            get { return BackingStore?.Get<string?>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#nullable restore
#else
        public string UserId
        {
            get { return BackingStore?.Get<string>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#endif
        /// <summary>User principal name of the user that initiated the sign-in. This value is always in lowercase. For guest users whose values in the user object typically contain #EXT# before the domain part, this property stores the value in both lowercase and the &apos;true&apos; format. For example, while the user object stores AdeleVance_fabrikam.com#EXT#@contoso.com, the sign-in logs store adelevance@fabrikam.com. Supports $filter (eq, startsWith).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName
        {
            get { return BackingStore?.Get<string?>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#nullable restore
#else
        public string UserPrincipalName
        {
            get { return BackingStore?.Get<string>("userPrincipalName"); }
            set { BackingStore?.Set("userPrincipalName", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.SignIn"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Models.SignIn CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Models.SignIn();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "appDisplayName", n => { AppDisplayName = n.GetStringValue(); } },
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "appliedConditionalAccessPolicies", n => { AppliedConditionalAccessPolicies = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.AppliedConditionalAccessPolicy>(global::Microsoft.Graph.Models.AppliedConditionalAccessPolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "clientAppUsed", n => { ClientAppUsed = n.GetStringValue(); } },
                { "conditionalAccessStatus", n => { ConditionalAccessStatus = n.GetEnumValue<global::Microsoft.Graph.Models.ConditionalAccessStatus>(); } },
                { "correlationId", n => { CorrelationId = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "deviceDetail", n => { DeviceDetail = n.GetObjectValue<global::Microsoft.Graph.Models.DeviceDetail>(global::Microsoft.Graph.Models.DeviceDetail.CreateFromDiscriminatorValue); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "isInteractive", n => { IsInteractive = n.GetBoolValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::Microsoft.Graph.Models.SignInLocation>(global::Microsoft.Graph.Models.SignInLocation.CreateFromDiscriminatorValue); } },
                { "resourceDisplayName", n => { ResourceDisplayName = n.GetStringValue(); } },
                { "resourceId", n => { ResourceId = n.GetStringValue(); } },
                { "riskDetail", n => { RiskDetail = n.GetEnumValue<global::Microsoft.Graph.Models.RiskDetail>(); } },
                { "riskEventTypes", n => { RiskEventTypes = n.GetCollectionOfEnumValues<global::Microsoft.Graph.Models.RiskEventType>()?.AsList(); } },
                { "riskEventTypes_v2", n => { RiskEventTypesV2 = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "riskLevelAggregated", n => { RiskLevelAggregated = n.GetEnumValue<global::Microsoft.Graph.Models.RiskLevel>(); } },
                { "riskLevelDuringSignIn", n => { RiskLevelDuringSignIn = n.GetEnumValue<global::Microsoft.Graph.Models.RiskLevel>(); } },
                { "riskState", n => { RiskState = n.GetEnumValue<global::Microsoft.Graph.Models.RiskState>(); } },
                { "status", n => { Status = n.GetObjectValue<global::Microsoft.Graph.Models.SignInStatus>(global::Microsoft.Graph.Models.SignInStatus.CreateFromDiscriminatorValue); } },
                { "userDisplayName", n => { UserDisplayName = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("appDisplayName", AppDisplayName);
            writer.WriteStringValue("appId", AppId);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.AppliedConditionalAccessPolicy>("appliedConditionalAccessPolicies", AppliedConditionalAccessPolicies);
            writer.WriteStringValue("clientAppUsed", ClientAppUsed);
            writer.WriteEnumValue<global::Microsoft.Graph.Models.ConditionalAccessStatus>("conditionalAccessStatus", ConditionalAccessStatus);
            writer.WriteStringValue("correlationId", CorrelationId);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.DeviceDetail>("deviceDetail", DeviceDetail);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteBoolValue("isInteractive", IsInteractive);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.SignInLocation>("location", Location);
            writer.WriteStringValue("resourceDisplayName", ResourceDisplayName);
            writer.WriteStringValue("resourceId", ResourceId);
            writer.WriteEnumValue<global::Microsoft.Graph.Models.RiskDetail>("riskDetail", RiskDetail);
            writer.WriteCollectionOfEnumValues<global::Microsoft.Graph.Models.RiskEventType>("riskEventTypes", RiskEventTypes);
            writer.WriteCollectionOfPrimitiveValues<string>("riskEventTypes_v2", RiskEventTypesV2);
            writer.WriteEnumValue<global::Microsoft.Graph.Models.RiskLevel>("riskLevelAggregated", RiskLevelAggregated);
            writer.WriteEnumValue<global::Microsoft.Graph.Models.RiskLevel>("riskLevelDuringSignIn", RiskLevelDuringSignIn);
            writer.WriteEnumValue<global::Microsoft.Graph.Models.RiskState>("riskState", RiskState);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.SignInStatus>("status", Status);
            writer.WriteStringValue("userDisplayName", UserDisplayName);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
        }
    }
}
