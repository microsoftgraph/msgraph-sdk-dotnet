// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class PolicyTemplate : global::Microsoft.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Defines an optional cross-tenant access policy template with user synchronization settings for a multitenant organization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.MultiTenantOrganizationIdentitySyncPolicyTemplate? MultiTenantOrganizationIdentitySynchronization
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.MultiTenantOrganizationIdentitySyncPolicyTemplate?>("multiTenantOrganizationIdentitySynchronization"); }
            set { BackingStore?.Set("multiTenantOrganizationIdentitySynchronization", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.MultiTenantOrganizationIdentitySyncPolicyTemplate MultiTenantOrganizationIdentitySynchronization
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.MultiTenantOrganizationIdentitySyncPolicyTemplate>("multiTenantOrganizationIdentitySynchronization"); }
            set { BackingStore?.Set("multiTenantOrganizationIdentitySynchronization", value); }
        }
#endif
        /// <summary>Defines an optional cross-tenant access policy template with inbound and outbound partner configuration settings for a multitenant organization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.MultiTenantOrganizationPartnerConfigurationTemplate? MultiTenantOrganizationPartnerConfiguration
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.MultiTenantOrganizationPartnerConfigurationTemplate?>("multiTenantOrganizationPartnerConfiguration"); }
            set { BackingStore?.Set("multiTenantOrganizationPartnerConfiguration", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.MultiTenantOrganizationPartnerConfigurationTemplate MultiTenantOrganizationPartnerConfiguration
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.MultiTenantOrganizationPartnerConfigurationTemplate>("multiTenantOrganizationPartnerConfiguration"); }
            set { BackingStore?.Set("multiTenantOrganizationPartnerConfiguration", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.PolicyTemplate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Models.PolicyTemplate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Models.PolicyTemplate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "multiTenantOrganizationIdentitySynchronization", n => { MultiTenantOrganizationIdentitySynchronization = n.GetObjectValue<global::Microsoft.Graph.Models.MultiTenantOrganizationIdentitySyncPolicyTemplate>(global::Microsoft.Graph.Models.MultiTenantOrganizationIdentitySyncPolicyTemplate.CreateFromDiscriminatorValue); } },
                { "multiTenantOrganizationPartnerConfiguration", n => { MultiTenantOrganizationPartnerConfiguration = n.GetObjectValue<global::Microsoft.Graph.Models.MultiTenantOrganizationPartnerConfigurationTemplate>(global::Microsoft.Graph.Models.MultiTenantOrganizationPartnerConfigurationTemplate.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.MultiTenantOrganizationIdentitySyncPolicyTemplate>("multiTenantOrganizationIdentitySynchronization", MultiTenantOrganizationIdentitySynchronization);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.MultiTenantOrganizationPartnerConfigurationTemplate>("multiTenantOrganizationPartnerConfiguration", MultiTenantOrganizationPartnerConfiguration);
        }
    }
}
