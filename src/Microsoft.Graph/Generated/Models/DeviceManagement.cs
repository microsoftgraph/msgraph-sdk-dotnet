// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Graph.Models
{
    /// <summary>
    /// Singleton entity that acts as a container for all device management functionality.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class DeviceManagement : global::Microsoft.Graph.Models.Entity, IParsable
    {
        /// <summary>Apple push notification certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.ApplePushNotificationCertificate? ApplePushNotificationCertificate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.ApplePushNotificationCertificate?>("applePushNotificationCertificate"); }
            set { BackingStore?.Set("applePushNotificationCertificate", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.ApplePushNotificationCertificate ApplePushNotificationCertificate
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.ApplePushNotificationCertificate>("applePushNotificationCertificate"); }
            set { BackingStore?.Set("applePushNotificationCertificate", value); }
        }
#endif
        /// <summary>The Audit Events</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.AuditEvent>? AuditEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AuditEvent>?>("auditEvents"); }
            set { BackingStore?.Set("auditEvents", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.AuditEvent> AuditEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.AuditEvent>>("auditEvents"); }
            set { BackingStore?.Set("auditEvents", value); }
        }
#endif
        /// <summary>The list of Compliance Management Partners configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.ComplianceManagementPartner>? ComplianceManagementPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.ComplianceManagementPartner>?>("complianceManagementPartners"); }
            set { BackingStore?.Set("complianceManagementPartners", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.ComplianceManagementPartner> ComplianceManagementPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.ComplianceManagementPartner>>("complianceManagementPartners"); }
            set { BackingStore?.Set("complianceManagementPartners", value); }
        }
#endif
        /// <summary>The Exchange on premises conditional access settings. On premises conditional access will require devices to be both enrolled and compliant for mail access</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.OnPremisesConditionalAccessSettings? ConditionalAccessSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.OnPremisesConditionalAccessSettings?>("conditionalAccessSettings"); }
            set { BackingStore?.Set("conditionalAccessSettings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.OnPremisesConditionalAccessSettings ConditionalAccessSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.OnPremisesConditionalAccessSettings>("conditionalAccessSettings"); }
            set { BackingStore?.Set("conditionalAccessSettings", value); }
        }
#endif
        /// <summary>The list of detected apps associated with a device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DetectedApp>? DetectedApps
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DetectedApp>?>("detectedApps"); }
            set { BackingStore?.Set("detectedApps", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DetectedApp> DetectedApps
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DetectedApp>>("detectedApps"); }
            set { BackingStore?.Set("detectedApps", value); }
        }
#endif
        /// <summary>The list of device categories with the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceCategory>? DeviceCategories
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceCategory>?>("deviceCategories"); }
            set { BackingStore?.Set("deviceCategories", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceCategory> DeviceCategories
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceCategory>>("deviceCategories"); }
            set { BackingStore?.Set("deviceCategories", value); }
        }
#endif
        /// <summary>The device compliance policies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceCompliancePolicy>? DeviceCompliancePolicies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceCompliancePolicy>?>("deviceCompliancePolicies"); }
            set { BackingStore?.Set("deviceCompliancePolicies", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceCompliancePolicy> DeviceCompliancePolicies
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceCompliancePolicy>>("deviceCompliancePolicies"); }
            set { BackingStore?.Set("deviceCompliancePolicies", value); }
        }
#endif
        /// <summary>The device compliance state summary for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.DeviceCompliancePolicyDeviceStateSummary? DeviceCompliancePolicyDeviceStateSummary
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceCompliancePolicyDeviceStateSummary?>("deviceCompliancePolicyDeviceStateSummary"); }
            set { BackingStore?.Set("deviceCompliancePolicyDeviceStateSummary", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.DeviceCompliancePolicyDeviceStateSummary DeviceCompliancePolicyDeviceStateSummary
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceCompliancePolicyDeviceStateSummary>("deviceCompliancePolicyDeviceStateSummary"); }
            set { BackingStore?.Set("deviceCompliancePolicyDeviceStateSummary", value); }
        }
#endif
        /// <summary>The summary states of compliance policy settings for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceCompliancePolicySettingStateSummary>? DeviceCompliancePolicySettingStateSummaries
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceCompliancePolicySettingStateSummary>?>("deviceCompliancePolicySettingStateSummaries"); }
            set { BackingStore?.Set("deviceCompliancePolicySettingStateSummaries", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceCompliancePolicySettingStateSummary> DeviceCompliancePolicySettingStateSummaries
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceCompliancePolicySettingStateSummary>>("deviceCompliancePolicySettingStateSummaries"); }
            set { BackingStore?.Set("deviceCompliancePolicySettingStateSummaries", value); }
        }
#endif
        /// <summary>The device configuration device state summary for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.DeviceConfigurationDeviceStateSummary? DeviceConfigurationDeviceStateSummaries
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceConfigurationDeviceStateSummary?>("deviceConfigurationDeviceStateSummaries"); }
            set { BackingStore?.Set("deviceConfigurationDeviceStateSummaries", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.DeviceConfigurationDeviceStateSummary DeviceConfigurationDeviceStateSummaries
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceConfigurationDeviceStateSummary>("deviceConfigurationDeviceStateSummaries"); }
            set { BackingStore?.Set("deviceConfigurationDeviceStateSummaries", value); }
        }
#endif
        /// <summary>The device configurations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceConfiguration>? DeviceConfigurations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceConfiguration>?>("deviceConfigurations"); }
            set { BackingStore?.Set("deviceConfigurations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceConfiguration> DeviceConfigurations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceConfiguration>>("deviceConfigurations"); }
            set { BackingStore?.Set("deviceConfigurations", value); }
        }
#endif
        /// <summary>The list of device enrollment configurations</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceEnrollmentConfiguration>? DeviceEnrollmentConfigurations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceEnrollmentConfiguration>?>("deviceEnrollmentConfigurations"); }
            set { BackingStore?.Set("deviceEnrollmentConfigurations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceEnrollmentConfiguration> DeviceEnrollmentConfigurations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceEnrollmentConfiguration>>("deviceEnrollmentConfigurations"); }
            set { BackingStore?.Set("deviceEnrollmentConfigurations", value); }
        }
#endif
        /// <summary>The list of Device Management Partners configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceManagementPartner>? DeviceManagementPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceManagementPartner>?>("deviceManagementPartners"); }
            set { BackingStore?.Set("deviceManagementPartners", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceManagementPartner> DeviceManagementPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceManagementPartner>>("deviceManagementPartners"); }
            set { BackingStore?.Set("deviceManagementPartners", value); }
        }
#endif
        /// <summary>Device protection overview.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.DeviceProtectionOverview? DeviceProtectionOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceProtectionOverview?>("deviceProtectionOverview"); }
            set { BackingStore?.Set("deviceProtectionOverview", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.DeviceProtectionOverview DeviceProtectionOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceProtectionOverview>("deviceProtectionOverview"); }
            set { BackingStore?.Set("deviceProtectionOverview", value); }
        }
#endif
        /// <summary>The list of Exchange Connectors configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceManagementExchangeConnector>? ExchangeConnectors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceManagementExchangeConnector>?>("exchangeConnectors"); }
            set { BackingStore?.Set("exchangeConnectors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceManagementExchangeConnector> ExchangeConnectors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceManagementExchangeConnector>>("exchangeConnectors"); }
            set { BackingStore?.Set("exchangeConnectors", value); }
        }
#endif
        /// <summary>Collection of imported Windows autopilot devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.ImportedWindowsAutopilotDeviceIdentity>? ImportedWindowsAutopilotDeviceIdentities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.ImportedWindowsAutopilotDeviceIdentity>?>("importedWindowsAutopilotDeviceIdentities"); }
            set { BackingStore?.Set("importedWindowsAutopilotDeviceIdentities", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.ImportedWindowsAutopilotDeviceIdentity> ImportedWindowsAutopilotDeviceIdentities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.ImportedWindowsAutopilotDeviceIdentity>>("importedWindowsAutopilotDeviceIdentities"); }
            set { BackingStore?.Set("importedWindowsAutopilotDeviceIdentities", value); }
        }
#endif
        /// <summary>Intune Account Id for given tenant</summary>
        public Guid? IntuneAccountId
        {
            get { return BackingStore?.Get<Guid?>("intuneAccountId"); }
            set { BackingStore?.Set("intuneAccountId", value); }
        }
        /// <summary>intuneBrand contains data which is used in customizing the appearance of the Company Portal applications as well as the end user web portal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.IntuneBrand? IntuneBrand
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.IntuneBrand?>("intuneBrand"); }
            set { BackingStore?.Set("intuneBrand", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.IntuneBrand IntuneBrand
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.IntuneBrand>("intuneBrand"); }
            set { BackingStore?.Set("intuneBrand", value); }
        }
#endif
        /// <summary>The IOS software update installation statuses for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.IosUpdateDeviceStatus>? IosUpdateStatuses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.IosUpdateDeviceStatus>?>("iosUpdateStatuses"); }
            set { BackingStore?.Set("iosUpdateStatuses", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.IosUpdateDeviceStatus> IosUpdateStatuses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.IosUpdateDeviceStatus>>("iosUpdateStatuses"); }
            set { BackingStore?.Set("iosUpdateStatuses", value); }
        }
#endif
        /// <summary>Device overview</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.ManagedDeviceOverview? ManagedDeviceOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.ManagedDeviceOverview?>("managedDeviceOverview"); }
            set { BackingStore?.Set("managedDeviceOverview", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.ManagedDeviceOverview ManagedDeviceOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.ManagedDeviceOverview>("managedDeviceOverview"); }
            set { BackingStore?.Set("managedDeviceOverview", value); }
        }
#endif
        /// <summary>The list of managed devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.ManagedDevice>? ManagedDevices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.ManagedDevice>?>("managedDevices"); }
            set { BackingStore?.Set("managedDevices", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.ManagedDevice> ManagedDevices
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.ManagedDevice>>("managedDevices"); }
            set { BackingStore?.Set("managedDevices", value); }
        }
#endif
        /// <summary>The collection property of MobileAppTroubleshootingEvent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.MobileAppTroubleshootingEvent>? MobileAppTroubleshootingEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.MobileAppTroubleshootingEvent>?>("mobileAppTroubleshootingEvents"); }
            set { BackingStore?.Set("mobileAppTroubleshootingEvents", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.MobileAppTroubleshootingEvent> MobileAppTroubleshootingEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.MobileAppTroubleshootingEvent>>("mobileAppTroubleshootingEvents"); }
            set { BackingStore?.Set("mobileAppTroubleshootingEvents", value); }
        }
#endif
        /// <summary>The list of Mobile threat Defense connectors configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.MobileThreatDefenseConnector>? MobileThreatDefenseConnectors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.MobileThreatDefenseConnector>?>("mobileThreatDefenseConnectors"); }
            set { BackingStore?.Set("mobileThreatDefenseConnectors", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.MobileThreatDefenseConnector> MobileThreatDefenseConnectors
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.MobileThreatDefenseConnector>>("mobileThreatDefenseConnectors"); }
            set { BackingStore?.Set("mobileThreatDefenseConnectors", value); }
        }
#endif
        /// <summary>The Notification Message Templates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.NotificationMessageTemplate>? NotificationMessageTemplates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.NotificationMessageTemplate>?>("notificationMessageTemplates"); }
            set { BackingStore?.Set("notificationMessageTemplates", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.NotificationMessageTemplate> NotificationMessageTemplates
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.NotificationMessageTemplate>>("notificationMessageTemplates"); }
            set { BackingStore?.Set("notificationMessageTemplates", value); }
        }
#endif
        /// <summary>The remote assist partners.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.RemoteAssistancePartner>? RemoteAssistancePartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.RemoteAssistancePartner>?>("remoteAssistancePartners"); }
            set { BackingStore?.Set("remoteAssistancePartners", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.RemoteAssistancePartner> RemoteAssistancePartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.RemoteAssistancePartner>>("remoteAssistancePartners"); }
            set { BackingStore?.Set("remoteAssistancePartners", value); }
        }
#endif
        /// <summary>Reports singleton</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.DeviceManagementReports? Reports
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceManagementReports?>("reports"); }
            set { BackingStore?.Set("reports", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.DeviceManagementReports Reports
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceManagementReports>("reports"); }
            set { BackingStore?.Set("reports", value); }
        }
#endif
        /// <summary>The Resource Operations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.ResourceOperation>? ResourceOperations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.ResourceOperation>?>("resourceOperations"); }
            set { BackingStore?.Set("resourceOperations", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.ResourceOperation> ResourceOperations
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.ResourceOperation>>("resourceOperations"); }
            set { BackingStore?.Set("resourceOperations", value); }
        }
#endif
        /// <summary>The Role Assignments.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceAndAppManagementRoleAssignment>? RoleAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceAndAppManagementRoleAssignment>?>("roleAssignments"); }
            set { BackingStore?.Set("roleAssignments", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceAndAppManagementRoleAssignment> RoleAssignments
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceAndAppManagementRoleAssignment>>("roleAssignments"); }
            set { BackingStore?.Set("roleAssignments", value); }
        }
#endif
        /// <summary>The Role Definitions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.RoleDefinition>? RoleDefinitions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.RoleDefinition>?>("roleDefinitions"); }
            set { BackingStore?.Set("roleDefinitions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.RoleDefinition> RoleDefinitions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.RoleDefinition>>("roleDefinitions"); }
            set { BackingStore?.Set("roleDefinitions", value); }
        }
#endif
        /// <summary>Account level settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.DeviceManagementSettings? Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceManagementSettings?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.DeviceManagementSettings Settings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceManagementSettings>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>The software update status summary.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.SoftwareUpdateStatusSummary? SoftwareUpdateStatusSummary
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.SoftwareUpdateStatusSummary?>("softwareUpdateStatusSummary"); }
            set { BackingStore?.Set("softwareUpdateStatusSummary", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.SoftwareUpdateStatusSummary SoftwareUpdateStatusSummary
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.SoftwareUpdateStatusSummary>("softwareUpdateStatusSummary"); }
            set { BackingStore?.Set("softwareUpdateStatusSummary", value); }
        }
#endif
        /// <summary>Tenant mobile device management subscription state.</summary>
        public global::Microsoft.Graph.Models.DeviceManagementSubscriptionState? SubscriptionState
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.DeviceManagementSubscriptionState?>("subscriptionState"); }
            set { BackingStore?.Set("subscriptionState", value); }
        }
        /// <summary>The telecom expense management partners.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.TelecomExpenseManagementPartner>? TelecomExpenseManagementPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.TelecomExpenseManagementPartner>?>("telecomExpenseManagementPartners"); }
            set { BackingStore?.Set("telecomExpenseManagementPartners", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.TelecomExpenseManagementPartner> TelecomExpenseManagementPartners
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.TelecomExpenseManagementPartner>>("telecomExpenseManagementPartners"); }
            set { BackingStore?.Set("telecomExpenseManagementPartners", value); }
        }
#endif
        /// <summary>The terms and conditions associated with device management of the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.TermsAndConditions>? TermsAndConditions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.TermsAndConditions>?>("termsAndConditions"); }
            set { BackingStore?.Set("termsAndConditions", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.TermsAndConditions> TermsAndConditions
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.TermsAndConditions>>("termsAndConditions"); }
            set { BackingStore?.Set("termsAndConditions", value); }
        }
#endif
        /// <summary>The list of troubleshooting events for the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.DeviceManagementTroubleshootingEvent>? TroubleshootingEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceManagementTroubleshootingEvent>?>("troubleshootingEvents"); }
            set { BackingStore?.Set("troubleshootingEvents", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.DeviceManagementTroubleshootingEvent> TroubleshootingEvents
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.DeviceManagementTroubleshootingEvent>>("troubleshootingEvents"); }
            set { BackingStore?.Set("troubleshootingEvents", value); }
        }
#endif
        /// <summary>User experience analytics appHealth Application Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthApplicationPerformance>? UserExperienceAnalyticsAppHealthApplicationPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthApplicationPerformance>?>("userExperienceAnalyticsAppHealthApplicationPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthApplicationPerformance", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthApplicationPerformance> UserExperienceAnalyticsAppHealthApplicationPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthApplicationPerformance>>("userExperienceAnalyticsAppHealthApplicationPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthApplicationPerformance", value); }
        }
#endif
        /// <summary>User experience analytics appHealth Application Performance by App Version details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>? UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>?>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails> UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails", value); }
        }
#endif
        /// <summary>User experience analytics appHealth Application Performance by App Version Device Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>? UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>?>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId> UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId", value); }
        }
#endif
        /// <summary>User experience analytics appHealth Application Performance by OS Version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>? UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>?>("userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion> UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>>("userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion", value); }
        }
#endif
        /// <summary>User experience analytics appHealth Model Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance>? UserExperienceAnalyticsAppHealthDeviceModelPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance>?>("userExperienceAnalyticsAppHealthDeviceModelPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthDeviceModelPerformance", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance> UserExperienceAnalyticsAppHealthDeviceModelPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance>>("userExperienceAnalyticsAppHealthDeviceModelPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthDeviceModelPerformance", value); }
        }
#endif
        /// <summary>User experience analytics appHealth Device Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformance>? UserExperienceAnalyticsAppHealthDevicePerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformance>?>("userExperienceAnalyticsAppHealthDevicePerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthDevicePerformance", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformance> UserExperienceAnalyticsAppHealthDevicePerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformance>>("userExperienceAnalyticsAppHealthDevicePerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthDevicePerformance", value); }
        }
#endif
        /// <summary>User experience analytics device performance details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails>? UserExperienceAnalyticsAppHealthDevicePerformanceDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails>?>("userExperienceAnalyticsAppHealthDevicePerformanceDetails"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthDevicePerformanceDetails", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails> UserExperienceAnalyticsAppHealthDevicePerformanceDetails
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails>>("userExperienceAnalyticsAppHealthDevicePerformanceDetails"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthDevicePerformanceDetails", value); }
        }
#endif
        /// <summary>User experience analytics appHealth OS version Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance>? UserExperienceAnalyticsAppHealthOSVersionPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance>?>("userExperienceAnalyticsAppHealthOSVersionPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthOSVersionPerformance", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance> UserExperienceAnalyticsAppHealthOSVersionPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance>>("userExperienceAnalyticsAppHealthOSVersionPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthOSVersionPerformance", value); }
        }
#endif
        /// <summary>User experience analytics appHealth overview</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory? UserExperienceAnalyticsAppHealthOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory?>("userExperienceAnalyticsAppHealthOverview"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthOverview", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory UserExperienceAnalyticsAppHealthOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory>("userExperienceAnalyticsAppHealthOverview"); }
            set { BackingStore?.Set("userExperienceAnalyticsAppHealthOverview", value); }
        }
#endif
        /// <summary>User experience analytics baselines</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsBaseline>? UserExperienceAnalyticsBaselines
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsBaseline>?>("userExperienceAnalyticsBaselines"); }
            set { BackingStore?.Set("userExperienceAnalyticsBaselines", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsBaseline> UserExperienceAnalyticsBaselines
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsBaseline>>("userExperienceAnalyticsBaselines"); }
            set { BackingStore?.Set("userExperienceAnalyticsBaselines", value); }
        }
#endif
        /// <summary>User experience analytics categories</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory>? UserExperienceAnalyticsCategories
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory>?>("userExperienceAnalyticsCategories"); }
            set { BackingStore?.Set("userExperienceAnalyticsCategories", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory> UserExperienceAnalyticsCategories
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory>>("userExperienceAnalyticsCategories"); }
            set { BackingStore?.Set("userExperienceAnalyticsCategories", value); }
        }
#endif
        /// <summary>User experience analytics device performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDevicePerformance>? UserExperienceAnalyticsDevicePerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDevicePerformance>?>("userExperienceAnalyticsDevicePerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsDevicePerformance", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDevicePerformance> UserExperienceAnalyticsDevicePerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDevicePerformance>>("userExperienceAnalyticsDevicePerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsDevicePerformance", value); }
        }
#endif
        /// <summary>User experience analytics device scores</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceScores>? UserExperienceAnalyticsDeviceScores
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceScores>?>("userExperienceAnalyticsDeviceScores"); }
            set { BackingStore?.Set("userExperienceAnalyticsDeviceScores", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceScores> UserExperienceAnalyticsDeviceScores
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceScores>>("userExperienceAnalyticsDeviceScores"); }
            set { BackingStore?.Set("userExperienceAnalyticsDeviceScores", value); }
        }
#endif
        /// <summary>User experience analytics device Startup History</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupHistory>? UserExperienceAnalyticsDeviceStartupHistory
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupHistory>?>("userExperienceAnalyticsDeviceStartupHistory"); }
            set { BackingStore?.Set("userExperienceAnalyticsDeviceStartupHistory", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupHistory> UserExperienceAnalyticsDeviceStartupHistory
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupHistory>>("userExperienceAnalyticsDeviceStartupHistory"); }
            set { BackingStore?.Set("userExperienceAnalyticsDeviceStartupHistory", value); }
        }
#endif
        /// <summary>User experience analytics device Startup Processes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcess>? UserExperienceAnalyticsDeviceStartupProcesses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcess>?>("userExperienceAnalyticsDeviceStartupProcesses"); }
            set { BackingStore?.Set("userExperienceAnalyticsDeviceStartupProcesses", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcess> UserExperienceAnalyticsDeviceStartupProcesses
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcess>>("userExperienceAnalyticsDeviceStartupProcesses"); }
            set { BackingStore?.Set("userExperienceAnalyticsDeviceStartupProcesses", value); }
        }
#endif
        /// <summary>User experience analytics device Startup Process Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance>? UserExperienceAnalyticsDeviceStartupProcessPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance>?>("userExperienceAnalyticsDeviceStartupProcessPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsDeviceStartupProcessPerformance", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance> UserExperienceAnalyticsDeviceStartupProcessPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance>>("userExperienceAnalyticsDeviceStartupProcessPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsDeviceStartupProcessPerformance", value); }
        }
#endif
        /// <summary>User experience analytics metric history</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsMetricHistory>? UserExperienceAnalyticsMetricHistory
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsMetricHistory>?>("userExperienceAnalyticsMetricHistory"); }
            set { BackingStore?.Set("userExperienceAnalyticsMetricHistory", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsMetricHistory> UserExperienceAnalyticsMetricHistory
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsMetricHistory>>("userExperienceAnalyticsMetricHistory"); }
            set { BackingStore?.Set("userExperienceAnalyticsMetricHistory", value); }
        }
#endif
        /// <summary>User experience analytics model scores</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsModelScores>? UserExperienceAnalyticsModelScores
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsModelScores>?>("userExperienceAnalyticsModelScores"); }
            set { BackingStore?.Set("userExperienceAnalyticsModelScores", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsModelScores> UserExperienceAnalyticsModelScores
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsModelScores>>("userExperienceAnalyticsModelScores"); }
            set { BackingStore?.Set("userExperienceAnalyticsModelScores", value); }
        }
#endif
        /// <summary>User experience analytics overview</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.UserExperienceAnalyticsOverview? UserExperienceAnalyticsOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserExperienceAnalyticsOverview?>("userExperienceAnalyticsOverview"); }
            set { BackingStore?.Set("userExperienceAnalyticsOverview", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.UserExperienceAnalyticsOverview UserExperienceAnalyticsOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserExperienceAnalyticsOverview>("userExperienceAnalyticsOverview"); }
            set { BackingStore?.Set("userExperienceAnalyticsOverview", value); }
        }
#endif
        /// <summary>User experience analytics device Startup Score History</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsScoreHistory>? UserExperienceAnalyticsScoreHistory
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsScoreHistory>?>("userExperienceAnalyticsScoreHistory"); }
            set { BackingStore?.Set("userExperienceAnalyticsScoreHistory", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsScoreHistory> UserExperienceAnalyticsScoreHistory
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsScoreHistory>>("userExperienceAnalyticsScoreHistory"); }
            set { BackingStore?.Set("userExperienceAnalyticsScoreHistory", value); }
        }
#endif
        /// <summary>User experience analytics device settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.UserExperienceAnalyticsSettings? UserExperienceAnalyticsSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserExperienceAnalyticsSettings?>("userExperienceAnalyticsSettings"); }
            set { BackingStore?.Set("userExperienceAnalyticsSettings", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.UserExperienceAnalyticsSettings UserExperienceAnalyticsSettings
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserExperienceAnalyticsSettings>("userExperienceAnalyticsSettings"); }
            set { BackingStore?.Set("userExperienceAnalyticsSettings", value); }
        }
#endif
        /// <summary>User experience analytics work from anywhere hardware readiness metrics.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric? UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric?>("userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric"); }
            set { BackingStore?.Set("userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric>("userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric"); }
            set { BackingStore?.Set("userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric", value); }
        }
#endif
        /// <summary>User experience analytics work from anywhere metrics.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereMetric>? UserExperienceAnalyticsWorkFromAnywhereMetrics
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereMetric>?>("userExperienceAnalyticsWorkFromAnywhereMetrics"); }
            set { BackingStore?.Set("userExperienceAnalyticsWorkFromAnywhereMetrics", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereMetric> UserExperienceAnalyticsWorkFromAnywhereMetrics
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereMetric>>("userExperienceAnalyticsWorkFromAnywhereMetrics"); }
            set { BackingStore?.Set("userExperienceAnalyticsWorkFromAnywhereMetrics", value); }
        }
#endif
        /// <summary>The user experience analytics work from anywhere model performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance>? UserExperienceAnalyticsWorkFromAnywhereModelPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance>?>("userExperienceAnalyticsWorkFromAnywhereModelPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsWorkFromAnywhereModelPerformance", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance> UserExperienceAnalyticsWorkFromAnywhereModelPerformance
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance>>("userExperienceAnalyticsWorkFromAnywhereModelPerformance"); }
            set { BackingStore?.Set("userExperienceAnalyticsWorkFromAnywhereModelPerformance", value); }
        }
#endif
        /// <summary>Virtual endpoint</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.VirtualEndpoint? VirtualEndpoint
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.VirtualEndpoint?>("virtualEndpoint"); }
            set { BackingStore?.Set("virtualEndpoint", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.VirtualEndpoint VirtualEndpoint
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.VirtualEndpoint>("virtualEndpoint"); }
            set { BackingStore?.Set("virtualEndpoint", value); }
        }
#endif
        /// <summary>The Windows autopilot device identities contained collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.WindowsAutopilotDeviceIdentity>? WindowsAutopilotDeviceIdentities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsAutopilotDeviceIdentity>?>("windowsAutopilotDeviceIdentities"); }
            set { BackingStore?.Set("windowsAutopilotDeviceIdentities", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.WindowsAutopilotDeviceIdentity> WindowsAutopilotDeviceIdentities
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsAutopilotDeviceIdentity>>("windowsAutopilotDeviceIdentities"); }
            set { BackingStore?.Set("windowsAutopilotDeviceIdentities", value); }
        }
#endif
        /// <summary>The windows information protection app learning summaries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.WindowsInformationProtectionAppLearningSummary>? WindowsInformationProtectionAppLearningSummaries
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsInformationProtectionAppLearningSummary>?>("windowsInformationProtectionAppLearningSummaries"); }
            set { BackingStore?.Set("windowsInformationProtectionAppLearningSummaries", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.WindowsInformationProtectionAppLearningSummary> WindowsInformationProtectionAppLearningSummaries
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsInformationProtectionAppLearningSummary>>("windowsInformationProtectionAppLearningSummaries"); }
            set { BackingStore?.Set("windowsInformationProtectionAppLearningSummaries", value); }
        }
#endif
        /// <summary>The windows information protection network learning summaries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.WindowsInformationProtectionNetworkLearningSummary>? WindowsInformationProtectionNetworkLearningSummaries
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsInformationProtectionNetworkLearningSummary>?>("windowsInformationProtectionNetworkLearningSummaries"); }
            set { BackingStore?.Set("windowsInformationProtectionNetworkLearningSummaries", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.WindowsInformationProtectionNetworkLearningSummary> WindowsInformationProtectionNetworkLearningSummaries
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsInformationProtectionNetworkLearningSummary>>("windowsInformationProtectionNetworkLearningSummaries"); }
            set { BackingStore?.Set("windowsInformationProtectionNetworkLearningSummaries", value); }
        }
#endif
        /// <summary>The list of affected malware in the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Graph.Models.WindowsMalwareInformation>? WindowsMalwareInformation
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsMalwareInformation>?>("windowsMalwareInformation"); }
            set { BackingStore?.Set("windowsMalwareInformation", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Graph.Models.WindowsMalwareInformation> WindowsMalwareInformation
        {
            get { return BackingStore?.Get<List<global::Microsoft.Graph.Models.WindowsMalwareInformation>>("windowsMalwareInformation"); }
            set { BackingStore?.Set("windowsMalwareInformation", value); }
        }
#endif
        /// <summary>Malware overview for windows devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Microsoft.Graph.Models.WindowsMalwareOverview? WindowsMalwareOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WindowsMalwareOverview?>("windowsMalwareOverview"); }
            set { BackingStore?.Set("windowsMalwareOverview", value); }
        }
#nullable restore
#else
        public global::Microsoft.Graph.Models.WindowsMalwareOverview WindowsMalwareOverview
        {
            get { return BackingStore?.Get<global::Microsoft.Graph.Models.WindowsMalwareOverview>("windowsMalwareOverview"); }
            set { BackingStore?.Set("windowsMalwareOverview", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Graph.Models.DeviceManagement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::Microsoft.Graph.Models.DeviceManagement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Graph.Models.DeviceManagement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "applePushNotificationCertificate", n => { ApplePushNotificationCertificate = n.GetObjectValue<global::Microsoft.Graph.Models.ApplePushNotificationCertificate>(global::Microsoft.Graph.Models.ApplePushNotificationCertificate.CreateFromDiscriminatorValue); } },
                { "auditEvents", n => { AuditEvents = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.AuditEvent>(global::Microsoft.Graph.Models.AuditEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "complianceManagementPartners", n => { ComplianceManagementPartners = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.ComplianceManagementPartner>(global::Microsoft.Graph.Models.ComplianceManagementPartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "conditionalAccessSettings", n => { ConditionalAccessSettings = n.GetObjectValue<global::Microsoft.Graph.Models.OnPremisesConditionalAccessSettings>(global::Microsoft.Graph.Models.OnPremisesConditionalAccessSettings.CreateFromDiscriminatorValue); } },
                { "detectedApps", n => { DetectedApps = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DetectedApp>(global::Microsoft.Graph.Models.DetectedApp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceCategories", n => { DeviceCategories = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceCategory>(global::Microsoft.Graph.Models.DeviceCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceCompliancePolicies", n => { DeviceCompliancePolicies = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceCompliancePolicy>(global::Microsoft.Graph.Models.DeviceCompliancePolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceCompliancePolicyDeviceStateSummary", n => { DeviceCompliancePolicyDeviceStateSummary = n.GetObjectValue<global::Microsoft.Graph.Models.DeviceCompliancePolicyDeviceStateSummary>(global::Microsoft.Graph.Models.DeviceCompliancePolicyDeviceStateSummary.CreateFromDiscriminatorValue); } },
                { "deviceCompliancePolicySettingStateSummaries", n => { DeviceCompliancePolicySettingStateSummaries = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceCompliancePolicySettingStateSummary>(global::Microsoft.Graph.Models.DeviceCompliancePolicySettingStateSummary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceConfigurationDeviceStateSummaries", n => { DeviceConfigurationDeviceStateSummaries = n.GetObjectValue<global::Microsoft.Graph.Models.DeviceConfigurationDeviceStateSummary>(global::Microsoft.Graph.Models.DeviceConfigurationDeviceStateSummary.CreateFromDiscriminatorValue); } },
                { "deviceConfigurations", n => { DeviceConfigurations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceConfiguration>(global::Microsoft.Graph.Models.DeviceConfiguration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceEnrollmentConfigurations", n => { DeviceEnrollmentConfigurations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceEnrollmentConfiguration>(global::Microsoft.Graph.Models.DeviceEnrollmentConfiguration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceManagementPartners", n => { DeviceManagementPartners = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceManagementPartner>(global::Microsoft.Graph.Models.DeviceManagementPartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceProtectionOverview", n => { DeviceProtectionOverview = n.GetObjectValue<global::Microsoft.Graph.Models.DeviceProtectionOverview>(global::Microsoft.Graph.Models.DeviceProtectionOverview.CreateFromDiscriminatorValue); } },
                { "exchangeConnectors", n => { ExchangeConnectors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceManagementExchangeConnector>(global::Microsoft.Graph.Models.DeviceManagementExchangeConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "importedWindowsAutopilotDeviceIdentities", n => { ImportedWindowsAutopilotDeviceIdentities = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.ImportedWindowsAutopilotDeviceIdentity>(global::Microsoft.Graph.Models.ImportedWindowsAutopilotDeviceIdentity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "intuneAccountId", n => { IntuneAccountId = n.GetGuidValue(); } },
                { "intuneBrand", n => { IntuneBrand = n.GetObjectValue<global::Microsoft.Graph.Models.IntuneBrand>(global::Microsoft.Graph.Models.IntuneBrand.CreateFromDiscriminatorValue); } },
                { "iosUpdateStatuses", n => { IosUpdateStatuses = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.IosUpdateDeviceStatus>(global::Microsoft.Graph.Models.IosUpdateDeviceStatus.CreateFromDiscriminatorValue)?.AsList(); } },
                { "managedDeviceOverview", n => { ManagedDeviceOverview = n.GetObjectValue<global::Microsoft.Graph.Models.ManagedDeviceOverview>(global::Microsoft.Graph.Models.ManagedDeviceOverview.CreateFromDiscriminatorValue); } },
                { "managedDevices", n => { ManagedDevices = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.ManagedDevice>(global::Microsoft.Graph.Models.ManagedDevice.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mobileAppTroubleshootingEvents", n => { MobileAppTroubleshootingEvents = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.MobileAppTroubleshootingEvent>(global::Microsoft.Graph.Models.MobileAppTroubleshootingEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mobileThreatDefenseConnectors", n => { MobileThreatDefenseConnectors = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.MobileThreatDefenseConnector>(global::Microsoft.Graph.Models.MobileThreatDefenseConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "notificationMessageTemplates", n => { NotificationMessageTemplates = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.NotificationMessageTemplate>(global::Microsoft.Graph.Models.NotificationMessageTemplate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "remoteAssistancePartners", n => { RemoteAssistancePartners = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.RemoteAssistancePartner>(global::Microsoft.Graph.Models.RemoteAssistancePartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "reports", n => { Reports = n.GetObjectValue<global::Microsoft.Graph.Models.DeviceManagementReports>(global::Microsoft.Graph.Models.DeviceManagementReports.CreateFromDiscriminatorValue); } },
                { "resourceOperations", n => { ResourceOperations = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.ResourceOperation>(global::Microsoft.Graph.Models.ResourceOperation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleAssignments", n => { RoleAssignments = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceAndAppManagementRoleAssignment>(global::Microsoft.Graph.Models.DeviceAndAppManagementRoleAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleDefinitions", n => { RoleDefinitions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.RoleDefinition>(global::Microsoft.Graph.Models.RoleDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Microsoft.Graph.Models.DeviceManagementSettings>(global::Microsoft.Graph.Models.DeviceManagementSettings.CreateFromDiscriminatorValue); } },
                { "softwareUpdateStatusSummary", n => { SoftwareUpdateStatusSummary = n.GetObjectValue<global::Microsoft.Graph.Models.SoftwareUpdateStatusSummary>(global::Microsoft.Graph.Models.SoftwareUpdateStatusSummary.CreateFromDiscriminatorValue); } },
                { "subscriptionState", n => { SubscriptionState = n.GetEnumValue<global::Microsoft.Graph.Models.DeviceManagementSubscriptionState>(); } },
                { "telecomExpenseManagementPartners", n => { TelecomExpenseManagementPartners = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.TelecomExpenseManagementPartner>(global::Microsoft.Graph.Models.TelecomExpenseManagementPartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "termsAndConditions", n => { TermsAndConditions = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.TermsAndConditions>(global::Microsoft.Graph.Models.TermsAndConditions.CreateFromDiscriminatorValue)?.AsList(); } },
                { "troubleshootingEvents", n => { TroubleshootingEvents = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceManagementTroubleshootingEvent>(global::Microsoft.Graph.Models.DeviceManagementTroubleshootingEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformance", n => { UserExperienceAnalyticsAppHealthApplicationPerformance = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthApplicationPerformance>(global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthApplicationPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails", n => { UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>(global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId", n => { UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>(global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion", n => { UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>(global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthDeviceModelPerformance", n => { UserExperienceAnalyticsAppHealthDeviceModelPerformance = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance>(global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthDevicePerformance", n => { UserExperienceAnalyticsAppHealthDevicePerformance = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformance>(global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthDevicePerformanceDetails", n => { UserExperienceAnalyticsAppHealthDevicePerformanceDetails = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails>(global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthOSVersionPerformance", n => { UserExperienceAnalyticsAppHealthOSVersionPerformance = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance>(global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthOverview", n => { UserExperienceAnalyticsAppHealthOverview = n.GetObjectValue<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory>(global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsBaselines", n => { UserExperienceAnalyticsBaselines = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsBaseline>(global::Microsoft.Graph.Models.UserExperienceAnalyticsBaseline.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsCategories", n => { UserExperienceAnalyticsCategories = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory>(global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDevicePerformance", n => { UserExperienceAnalyticsDevicePerformance = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDevicePerformance>(global::Microsoft.Graph.Models.UserExperienceAnalyticsDevicePerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceScores", n => { UserExperienceAnalyticsDeviceScores = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceScores>(global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceScores.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceStartupHistory", n => { UserExperienceAnalyticsDeviceStartupHistory = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupHistory>(global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceStartupProcessPerformance", n => { UserExperienceAnalyticsDeviceStartupProcessPerformance = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance>(global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceStartupProcesses", n => { UserExperienceAnalyticsDeviceStartupProcesses = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcess>(global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcess.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsMetricHistory", n => { UserExperienceAnalyticsMetricHistory = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsMetricHistory>(global::Microsoft.Graph.Models.UserExperienceAnalyticsMetricHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsModelScores", n => { UserExperienceAnalyticsModelScores = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsModelScores>(global::Microsoft.Graph.Models.UserExperienceAnalyticsModelScores.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsOverview", n => { UserExperienceAnalyticsOverview = n.GetObjectValue<global::Microsoft.Graph.Models.UserExperienceAnalyticsOverview>(global::Microsoft.Graph.Models.UserExperienceAnalyticsOverview.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsScoreHistory", n => { UserExperienceAnalyticsScoreHistory = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsScoreHistory>(global::Microsoft.Graph.Models.UserExperienceAnalyticsScoreHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsSettings", n => { UserExperienceAnalyticsSettings = n.GetObjectValue<global::Microsoft.Graph.Models.UserExperienceAnalyticsSettings>(global::Microsoft.Graph.Models.UserExperienceAnalyticsSettings.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric", n => { UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric = n.GetObjectValue<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric>(global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsWorkFromAnywhereMetrics", n => { UserExperienceAnalyticsWorkFromAnywhereMetrics = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereMetric>(global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereMetric.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsWorkFromAnywhereModelPerformance", n => { UserExperienceAnalyticsWorkFromAnywhereModelPerformance = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance>(global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "virtualEndpoint", n => { VirtualEndpoint = n.GetObjectValue<global::Microsoft.Graph.Models.VirtualEndpoint>(global::Microsoft.Graph.Models.VirtualEndpoint.CreateFromDiscriminatorValue); } },
                { "windowsAutopilotDeviceIdentities", n => { WindowsAutopilotDeviceIdentities = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsAutopilotDeviceIdentity>(global::Microsoft.Graph.Models.WindowsAutopilotDeviceIdentity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsInformationProtectionAppLearningSummaries", n => { WindowsInformationProtectionAppLearningSummaries = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsInformationProtectionAppLearningSummary>(global::Microsoft.Graph.Models.WindowsInformationProtectionAppLearningSummary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsInformationProtectionNetworkLearningSummaries", n => { WindowsInformationProtectionNetworkLearningSummaries = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsInformationProtectionNetworkLearningSummary>(global::Microsoft.Graph.Models.WindowsInformationProtectionNetworkLearningSummary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsMalwareInformation", n => { WindowsMalwareInformation = n.GetCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsMalwareInformation>(global::Microsoft.Graph.Models.WindowsMalwareInformation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsMalwareOverview", n => { WindowsMalwareOverview = n.GetObjectValue<global::Microsoft.Graph.Models.WindowsMalwareOverview>(global::Microsoft.Graph.Models.WindowsMalwareOverview.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.ApplePushNotificationCertificate>("applePushNotificationCertificate", ApplePushNotificationCertificate);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.AuditEvent>("auditEvents", AuditEvents);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.ComplianceManagementPartner>("complianceManagementPartners", ComplianceManagementPartners);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.OnPremisesConditionalAccessSettings>("conditionalAccessSettings", ConditionalAccessSettings);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DetectedApp>("detectedApps", DetectedApps);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceCategory>("deviceCategories", DeviceCategories);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceCompliancePolicy>("deviceCompliancePolicies", DeviceCompliancePolicies);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.DeviceCompliancePolicyDeviceStateSummary>("deviceCompliancePolicyDeviceStateSummary", DeviceCompliancePolicyDeviceStateSummary);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceCompliancePolicySettingStateSummary>("deviceCompliancePolicySettingStateSummaries", DeviceCompliancePolicySettingStateSummaries);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.DeviceConfigurationDeviceStateSummary>("deviceConfigurationDeviceStateSummaries", DeviceConfigurationDeviceStateSummaries);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceConfiguration>("deviceConfigurations", DeviceConfigurations);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceEnrollmentConfiguration>("deviceEnrollmentConfigurations", DeviceEnrollmentConfigurations);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceManagementPartner>("deviceManagementPartners", DeviceManagementPartners);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.DeviceProtectionOverview>("deviceProtectionOverview", DeviceProtectionOverview);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceManagementExchangeConnector>("exchangeConnectors", ExchangeConnectors);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.ImportedWindowsAutopilotDeviceIdentity>("importedWindowsAutopilotDeviceIdentities", ImportedWindowsAutopilotDeviceIdentities);
            writer.WriteGuidValue("intuneAccountId", IntuneAccountId);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.IntuneBrand>("intuneBrand", IntuneBrand);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.IosUpdateDeviceStatus>("iosUpdateStatuses", IosUpdateStatuses);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.ManagedDeviceOverview>("managedDeviceOverview", ManagedDeviceOverview);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.ManagedDevice>("managedDevices", ManagedDevices);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.MobileAppTroubleshootingEvent>("mobileAppTroubleshootingEvents", MobileAppTroubleshootingEvents);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.MobileThreatDefenseConnector>("mobileThreatDefenseConnectors", MobileThreatDefenseConnectors);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.NotificationMessageTemplate>("notificationMessageTemplates", NotificationMessageTemplates);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.RemoteAssistancePartner>("remoteAssistancePartners", RemoteAssistancePartners);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.DeviceManagementReports>("reports", Reports);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.ResourceOperation>("resourceOperations", ResourceOperations);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceAndAppManagementRoleAssignment>("roleAssignments", RoleAssignments);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.RoleDefinition>("roleDefinitions", RoleDefinitions);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.DeviceManagementSettings>("settings", Settings);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.SoftwareUpdateStatusSummary>("softwareUpdateStatusSummary", SoftwareUpdateStatusSummary);
            writer.WriteEnumValue<global::Microsoft.Graph.Models.DeviceManagementSubscriptionState>("subscriptionState", SubscriptionState);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.TelecomExpenseManagementPartner>("telecomExpenseManagementPartners", TelecomExpenseManagementPartners);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.TermsAndConditions>("termsAndConditions", TermsAndConditions);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.DeviceManagementTroubleshootingEvent>("troubleshootingEvents", TroubleshootingEvents);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthApplicationPerformance>("userExperienceAnalyticsAppHealthApplicationPerformance", UserExperienceAnalyticsAppHealthApplicationPerformance);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails", UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId", UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>("userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion", UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance>("userExperienceAnalyticsAppHealthDeviceModelPerformance", UserExperienceAnalyticsAppHealthDeviceModelPerformance);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformance>("userExperienceAnalyticsAppHealthDevicePerformance", UserExperienceAnalyticsAppHealthDevicePerformance);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails>("userExperienceAnalyticsAppHealthDevicePerformanceDetails", UserExperienceAnalyticsAppHealthDevicePerformanceDetails);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance>("userExperienceAnalyticsAppHealthOSVersionPerformance", UserExperienceAnalyticsAppHealthOSVersionPerformance);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory>("userExperienceAnalyticsAppHealthOverview", UserExperienceAnalyticsAppHealthOverview);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsBaseline>("userExperienceAnalyticsBaselines", UserExperienceAnalyticsBaselines);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsCategory>("userExperienceAnalyticsCategories", UserExperienceAnalyticsCategories);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDevicePerformance>("userExperienceAnalyticsDevicePerformance", UserExperienceAnalyticsDevicePerformance);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceScores>("userExperienceAnalyticsDeviceScores", UserExperienceAnalyticsDeviceScores);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupHistory>("userExperienceAnalyticsDeviceStartupHistory", UserExperienceAnalyticsDeviceStartupHistory);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcess>("userExperienceAnalyticsDeviceStartupProcesses", UserExperienceAnalyticsDeviceStartupProcesses);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance>("userExperienceAnalyticsDeviceStartupProcessPerformance", UserExperienceAnalyticsDeviceStartupProcessPerformance);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsMetricHistory>("userExperienceAnalyticsMetricHistory", UserExperienceAnalyticsMetricHistory);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsModelScores>("userExperienceAnalyticsModelScores", UserExperienceAnalyticsModelScores);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.UserExperienceAnalyticsOverview>("userExperienceAnalyticsOverview", UserExperienceAnalyticsOverview);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsScoreHistory>("userExperienceAnalyticsScoreHistory", UserExperienceAnalyticsScoreHistory);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.UserExperienceAnalyticsSettings>("userExperienceAnalyticsSettings", UserExperienceAnalyticsSettings);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric>("userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric", UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereMetric>("userExperienceAnalyticsWorkFromAnywhereMetrics", UserExperienceAnalyticsWorkFromAnywhereMetrics);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance>("userExperienceAnalyticsWorkFromAnywhereModelPerformance", UserExperienceAnalyticsWorkFromAnywhereModelPerformance);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.VirtualEndpoint>("virtualEndpoint", VirtualEndpoint);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsAutopilotDeviceIdentity>("windowsAutopilotDeviceIdentities", WindowsAutopilotDeviceIdentities);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsInformationProtectionAppLearningSummary>("windowsInformationProtectionAppLearningSummaries", WindowsInformationProtectionAppLearningSummaries);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsInformationProtectionNetworkLearningSummary>("windowsInformationProtectionNetworkLearningSummaries", WindowsInformationProtectionNetworkLearningSummaries);
            writer.WriteCollectionOfObjectValues<global::Microsoft.Graph.Models.WindowsMalwareInformation>("windowsMalwareInformation", WindowsMalwareInformation);
            writer.WriteObjectValue<global::Microsoft.Graph.Models.WindowsMalwareOverview>("windowsMalwareOverview", WindowsMalwareOverview);
        }
    }
}
