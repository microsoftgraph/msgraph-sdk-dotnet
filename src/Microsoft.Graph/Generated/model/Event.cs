// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Event.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<Event>))]
    public partial class Event : OutlookItem
    {
    
        ///<summary>
        /// The Event constructor
        ///</summary>
        public Event()
        {
            this.ODataType = "microsoft.graph.event";
        }

        /// <summary>
        /// Gets or sets allow new time proposals.
        /// true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. Default is true.
        /// </summary>
        [JsonPropertyName("allowNewTimeProposals")]
        public bool? AllowNewTimeProposals { get; set; }
    
        /// <summary>
        /// Gets or sets attendees.
        /// The collection of attendees for the event.
        /// </summary>
        [JsonPropertyName("attendees")]
        public IEnumerable<Attendee> Attendees { get; set; }
    
        /// <summary>
        /// Gets or sets body.
        /// The body of the message associated with the event. It can be in HTML or text format.
        /// </summary>
        [JsonPropertyName("body")]
        public ItemBody Body { get; set; }
    
        /// <summary>
        /// Gets or sets body preview.
        /// The preview of the message associated with the event. It is in text format.
        /// </summary>
        [JsonPropertyName("bodyPreview")]
        public string BodyPreview { get; set; }
    
        /// <summary>
        /// Gets or sets end.
        /// The date, time, and time zone that the event ends. By default, the end time is in UTC.
        /// </summary>
        [JsonPropertyName("end")]
        public DateTimeTimeZone End { get; set; }
    
        /// <summary>
        /// Gets or sets has attachments.
        /// Set to true if the event has attachments.
        /// </summary>
        [JsonPropertyName("hasAttachments")]
        public bool? HasAttachments { get; set; }
    
        /// <summary>
        /// Gets or sets hide attendees.
        /// When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. Default is false.
        /// </summary>
        [JsonPropertyName("hideAttendees")]
        public bool? HideAttendees { get; set; }
    
        /// <summary>
        /// Gets or sets i cal uid.
        /// A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
        /// </summary>
        [JsonPropertyName("iCalUId")]
        public string ICalUId { get; set; }
    
        /// <summary>
        /// Gets or sets importance.
        /// </summary>
        [JsonPropertyName("importance")]
        public Importance? Importance { get; set; }
    
        /// <summary>
        /// Gets or sets is all day.
        /// </summary>
        [JsonPropertyName("isAllDay")]
        public bool? IsAllDay { get; set; }
    
        /// <summary>
        /// Gets or sets is cancelled.
        /// </summary>
        [JsonPropertyName("isCancelled")]
        public bool? IsCancelled { get; set; }
    
        /// <summary>
        /// Gets or sets is draft.
        /// </summary>
        [JsonPropertyName("isDraft")]
        public bool? IsDraft { get; set; }
    
        /// <summary>
        /// Gets or sets is online meeting.
        /// </summary>
        [JsonPropertyName("isOnlineMeeting")]
        public bool? IsOnlineMeeting { get; set; }
    
        /// <summary>
        /// Gets or sets is organizer.
        /// </summary>
        [JsonPropertyName("isOrganizer")]
        public bool? IsOrganizer { get; set; }
    
        /// <summary>
        /// Gets or sets is reminder on.
        /// </summary>
        [JsonPropertyName("isReminderOn")]
        public bool? IsReminderOn { get; set; }
    
        /// <summary>
        /// Gets or sets location.
        /// </summary>
        [JsonPropertyName("location")]
        public Location Location { get; set; }
    
        /// <summary>
        /// Gets or sets locations.
        /// </summary>
        [JsonPropertyName("locations")]
        public IEnumerable<Location> Locations { get; set; }
    
        /// <summary>
        /// Gets or sets online meeting.
        /// </summary>
        [JsonPropertyName("onlineMeeting")]
        public OnlineMeetingInfo OnlineMeeting { get; set; }
    
        /// <summary>
        /// Gets or sets online meeting provider.
        /// </summary>
        [JsonPropertyName("onlineMeetingProvider")]
        public OnlineMeetingProviderType? OnlineMeetingProvider { get; set; }
    
        /// <summary>
        /// Gets or sets online meeting url.
        /// </summary>
        [JsonPropertyName("onlineMeetingUrl")]
        public string OnlineMeetingUrl { get; set; }
    
        /// <summary>
        /// Gets or sets organizer.
        /// </summary>
        [JsonPropertyName("organizer")]
        public Recipient Organizer { get; set; }
    
        /// <summary>
        /// Gets or sets original end time zone.
        /// </summary>
        [JsonPropertyName("originalEndTimeZone")]
        public string OriginalEndTimeZone { get; set; }
    
        /// <summary>
        /// Gets or sets original start.
        /// </summary>
        [JsonPropertyName("originalStart")]
        public DateTimeOffset? OriginalStart { get; set; }
    
        /// <summary>
        /// Gets or sets original start time zone.
        /// </summary>
        [JsonPropertyName("originalStartTimeZone")]
        public string OriginalStartTimeZone { get; set; }
    
        /// <summary>
        /// Gets or sets recurrence.
        /// </summary>
        [JsonPropertyName("recurrence")]
        public PatternedRecurrence Recurrence { get; set; }
    
        /// <summary>
        /// Gets or sets reminder minutes before start.
        /// </summary>
        [JsonPropertyName("reminderMinutesBeforeStart")]
        public Int32? ReminderMinutesBeforeStart { get; set; }
    
        /// <summary>
        /// Gets or sets response requested.
        /// </summary>
        [JsonPropertyName("responseRequested")]
        public bool? ResponseRequested { get; set; }
    
        /// <summary>
        /// Gets or sets response status.
        /// </summary>
        [JsonPropertyName("responseStatus")]
        public ResponseStatus ResponseStatus { get; set; }
    
        /// <summary>
        /// Gets or sets sensitivity.
        /// </summary>
        [JsonPropertyName("sensitivity")]
        public Sensitivity? Sensitivity { get; set; }
    
        /// <summary>
        /// Gets or sets series master id.
        /// </summary>
        [JsonPropertyName("seriesMasterId")]
        public string SeriesMasterId { get; set; }
    
        /// <summary>
        /// Gets or sets show as.
        /// </summary>
        [JsonPropertyName("showAs")]
        public FreeBusyStatus? ShowAs { get; set; }
    
        /// <summary>
        /// Gets or sets start.
        /// </summary>
        [JsonPropertyName("start")]
        public DateTimeTimeZone Start { get; set; }
    
        /// <summary>
        /// Gets or sets subject.
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get; set; }
    
        /// <summary>
        /// Gets or sets transaction id.
        /// </summary>
        [JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }
    
        /// <summary>
        /// Gets or sets type.
        /// </summary>
        [JsonPropertyName("type")]
        public EventType? Type { get; set; }
    
        /// <summary>
        /// Gets or sets web link.
        /// </summary>
        [JsonPropertyName("webLink")]
        public string WebLink { get; set; }
    
        /// <summary>
        /// Gets or sets attachments.
        /// The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
        /// </summary>
        [JsonPropertyName("attachments")]
        public IEventAttachmentsCollectionPage Attachments { get; set; }

        /// <summary>
        /// Gets or sets attachmentsNextLink.
        /// </summary>
        [JsonPropertyName("attachments@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string AttachmentsNextLink { get; set; }
    
        /// <summary>
        /// Gets or sets calendar.
        /// The calendar that contains the event. Navigation property. Read-only.
        /// </summary>
        [JsonPropertyName("calendar")]
        public Calendar Calendar { get; set; }
    
        /// <summary>
        /// Gets or sets extensions.
        /// The collection of open extensions defined for the event. Nullable.
        /// </summary>
        [JsonPropertyName("extensions")]
        public IEventExtensionsCollectionPage Extensions { get; set; }

        /// <summary>
        /// Gets or sets extensionsNextLink.
        /// </summary>
        [JsonPropertyName("extensions@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string ExtensionsNextLink { get; set; }
    
        /// <summary>
        /// Gets or sets instances.
        /// The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.
        /// </summary>
        [JsonPropertyName("instances")]
        public IEventInstancesCollectionPage Instances { get; set; }

        /// <summary>
        /// Gets or sets instancesNextLink.
        /// </summary>
        [JsonPropertyName("instances@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string InstancesNextLink { get; set; }
    
        /// <summary>
        /// Gets or sets multi value extended properties.
        /// The collection of multi-value extended properties defined for the event. Read-only. Nullable.
        /// </summary>
        [JsonPropertyName("multiValueExtendedProperties")]
        public IEventMultiValueExtendedPropertiesCollectionPage MultiValueExtendedProperties { get; set; }

        /// <summary>
        /// Gets or sets multiValueExtendedPropertiesNextLink.
        /// </summary>
        [JsonPropertyName("multiValueExtendedProperties@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string MultiValueExtendedPropertiesNextLink { get; set; }
    
        /// <summary>
        /// Gets or sets single value extended properties.
        /// The collection of single-value extended properties defined for the event. Read-only. Nullable.
        /// </summary>
        [JsonPropertyName("singleValueExtendedProperties")]
        public IEventSingleValueExtendedPropertiesCollectionPage SingleValueExtendedProperties { get; set; }

        /// <summary>
        /// Gets or sets singleValueExtendedPropertiesNextLink.
        /// </summary>
        [JsonPropertyName("singleValueExtendedProperties@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string SingleValueExtendedPropertiesNextLink { get; set; }
    
    }
}

