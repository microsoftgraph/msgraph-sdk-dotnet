// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type UploadSession.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<UploadSession>))]
    public partial class UploadSession
    {

        /// <summary>
        /// Gets or sets expirationDateTime.
        /// The date and time in UTC that the upload session will expire. The complete file must be uploaded before this expiration time is reached.
        /// </summary>
        [JsonPropertyName("expirationDateTime")]
        public DateTimeOffset? ExpirationDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets nextExpectedRanges.
        /// A collection of byte ranges that the server is missing for the file. These ranges are zero indexed and of the format 'start-end' (e.g. '0-26' to indicate the first 27 bytes of the file). When uploading files as Outlook attachments, instead of a collection of ranges, this property always indicates a single value '{start}', the location in the file where the next upload should begin.
        /// </summary>
        [JsonPropertyName("nextExpectedRanges")]
        public IEnumerable<string> NextExpectedRanges { get; set; }
    
        /// <summary>
        /// Gets or sets uploadUrl.
        /// The URL endpoint that accepts PUT requests for byte ranges of the file.
        /// </summary>
        [JsonPropertyName("uploadUrl")]
        public string UploadUrl { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
