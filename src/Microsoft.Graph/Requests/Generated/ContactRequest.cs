// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    
    using Microsoft.Graph.Core;

    /// <summary>
    /// The type ContactRequest.
    /// </summary>
    public partial class ContactRequest : BaseRequest, IContactRequest
    {
        /// <summary>
        /// Constructs a new ContactRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public ContactRequest(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified Contact using PUT.
        /// </summary>
        /// <param name="contactToCreate">The Contact to create.</param>
        /// <returns>The created Contact.</returns>
        public Task<Contact> CreateAsync(Contact contactToCreate)
        {
            return this.CreateAsync(contactToCreate, CancellationToken.None);
        }

        /// <summary>
        /// Creates the specified Contact using PUT.
        /// </summary>
        /// <param name="contactToCreate">The Contact to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created Contact.</returns>
        public async Task<Contact> CreateAsync(Contact contactToCreate, CancellationToken cancellationToken)
        {
            this.ContentType = "application/json";
            this.Method = "PUT";
            var newEntity = await this.SendAsync<Contact>(contactToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Deletes the specified Contact.
        /// </summary>
        /// <returns>The task to await.</returns>
        public Task DeleteAsync()
        {
            return this.DeleteAsync(CancellationToken.None);
        }

        /// <summary>
        /// Deletes the specified Contact.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async Task DeleteAsync(CancellationToken cancellationToken)
        {
            this.Method = "DELETE";
            await this.SendAsync<Contact>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Contact.
        /// </summary>
        /// <returns>The Contact.</returns>
        public Task<Contact> GetAsync()
        {
            return this.GetAsync(CancellationToken.None);
        }

        /// <summary>
        /// Gets the specified Contact.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The Contact.</returns>
        public async Task<Contact> GetAsync(CancellationToken cancellationToken)
        {
            this.Method = "GET";
            var retrievedEntity = await this.SendAsync<Contact>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Updates the specified Contact using PATCH.
        /// </summary>
        /// <param name="contactToUpdate">The Contact to update.</param>
        /// <returns>The updated Contact.</returns>
        public Task<Contact> UpdateAsync(Contact contactToUpdate)
        {
            return this.UpdateAsync(contactToUpdate, CancellationToken.None);
        }

        /// <summary>
        /// Updates the specified Contact using PATCH.
        /// </summary>
        /// <param name="contactToUpdate">The Contact to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The updated Contact.</returns>
        public async Task<Contact> UpdateAsync(Contact contactToUpdate, CancellationToken cancellationToken)
        {
            this.ContentType = "application/json";
            this.Method = "PATCH";
            var updatedEntity = await this.SendAsync<Contact>(contactToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public IContactRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public IContactRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="contactToInitialize">The <see cref="Contact"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(Contact contactToInitialize)
        {
        
        }
    }
}
